<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独狂饮</title>
  <subtitle>只要有百分之一的梦想，就要付出百分之百的努力。努力不一定成功，但是不努力就一定不会成功！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gdky005.com/"/>
  <updated>2016-11-01T11:43:49.000Z</updated>
  <id>http://gdky005.com/</id>
  
  <author>
    <name>gdky005</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>卓客Team团队组建成功</title>
    <link href="http://gdky005.com/2016/11/01/%E5%8D%93%E5%AE%A2Team%E5%9B%A2%E9%98%9F%E7%BB%84%E5%BB%BA%E6%88%90%E5%8A%9F/"/>
    <id>http://gdky005.com/2016/11/01/卓客Team团队组建成功/</id>
    <published>2016-11-01T11:36:52.000Z</published>
    <updated>2016-11-01T11:43:49.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;卓客Team团队组建成功&quot;&gt;&lt;a href=&quot;#卓客Team团队组建成功&quot; class=&quot;headerlink&quot; title=&quot;卓客Team团队组建成功&quot;&gt;&lt;/a&gt;卓客Team团队组建成功&lt;/h3&gt;&lt;p&gt;卓客Team团队 目前已经组建成功，接下来将完成一些很有意义的事情，请持续关注。&lt;/p&gt;
&lt;h3 id=&quot;卓客Team-群规&quot;&gt;&lt;a href=&quot;#卓客Team-群规&quot; class=&quot;headerlink&quot; title=&quot;卓客Team 群规&quot;&gt;&lt;/a&gt;卓客Team 群规&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;群成员固定为20人，如有突出贡献者，可以破格入群。&lt;/li&gt;
&lt;li&gt;这是一个活跃度很高的Team，每个人都应该展现自己的能力，提升在团队中的影响力。&lt;/li&gt;
&lt;li&gt;请大家都参与课题的设计和讨论，提升个人基本知识技能，并增加团队活跃度。&lt;/li&gt;
&lt;li&gt;希望大家能把好想法和想要研究的东西发到群里面，会被列入到要处理的事项里面。&lt;/li&gt;
&lt;li&gt;做一些很有价值的事情，研究比较感兴趣的技术，撰写一些有技术内涵的文章。&lt;br&gt;在团队中的人，都应该为团队做出适当的贡献，有能力的展示才华，能力弱的可以在其他方面给团队做出贡献。&lt;/li&gt;
&lt;li&gt;对申请加入到群组的人，务必完成一篇课题文章，带组员审核通过后，方可进入。&lt;br&gt;如有新人进入，可能会踢出某些不活跃的成员，请见谅。&lt;/li&gt;
&lt;li&gt;对于活跃度不高的成员，采取适者生存的法则。&lt;/li&gt;
&lt;li&gt;对于存在争议的问题，采取大于等于三分之二以上的票数为通过条件。&lt;/li&gt;
&lt;li&gt;对团队中成员发出的文章或者团队的规定等有疑问或者感觉不合适的地方，可以直接提出修改，并在评论中提出个人观点。&lt;/li&gt;
&lt;li&gt;对于不合理的地方，可以在相关平台上发表自己的意见。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;卓客Team团队组建成功&quot;&gt;&lt;a href=&quot;#卓客Team团队组建成功&quot; class=&quot;headerlink&quot; title=&quot;卓客Team团队组建成功&quot;&gt;&lt;/a&gt;卓客Team团队组建成功&lt;/h3&gt;&lt;p&gt;卓客Team团队 目前已经组建成功，接下来将完成一些很有意义
    
    </summary>
    
      <category term="ZhuoKeTeam" scheme="http://gdky005.com/categories/ZhuoKeTeam/"/>
    
    
      <category term="卓客Team" scheme="http://gdky005.com/tags/%E5%8D%93%E5%AE%A2Team/"/>
    
  </entry>
  
  <entry>
    <title>你是如何走上编程这条道路的?</title>
    <link href="http://gdky005.com/2016/10/24/%E4%BD%A0%E6%98%AF%E5%A6%82%E4%BD%95%E8%B5%B0%E4%B8%8A%E7%BC%96%E7%A8%8B%E8%BF%99%E6%9D%A1%E9%81%93%E8%B7%AF%E7%9A%84/"/>
    <id>http://gdky005.com/2016/10/24/你是如何走上编程这条道路的/</id>
    <published>2016-10-24T09:47:42.000Z</published>
    <updated>2016-10-24T09:53:32.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;编程之路从点滴开启&quot;&gt;&lt;a href=&quot;#编程之路从点滴开启&quot; class=&quot;headerlink&quot; title=&quot;编程之路从点滴开启&quot;&gt;&lt;/a&gt;编程之路从点滴开启&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;今天想随便聊聊，被人问到我是如何走上编程之路的，于是有感而发，特写此文记录.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;第一台设备&quot;&gt;&lt;a href=&quot;#第一台设备&quot; class=&quot;headerlink&quot; title=&quot;第一台设备&quot;&gt;&lt;/a&gt;第一台设备&lt;/h3&gt;&lt;p&gt;还记得高一的时候，非要在外打工的爸爸妈妈买文曲星学习。说真的，当时对学习确实有点用，但是用来看小flash，听歌，研究小游戏的时间会更多。记得当时使用VB 写的脚本，但是当时对这块一片空白，只是简单的玩玩。&lt;/p&gt;
&lt;h3 id=&quot;第二台设备&quot;&gt;&lt;a href=&quot;#第二台设备&quot; class=&quot;headerlink&quot; title=&quot;第二台设备&quot;&gt;&lt;/a&gt;第二台设备&lt;/h3&gt;&lt;p&gt;   高二，听闻我们街道上的网吧淘汰机子，于是让爸爸给我买了一台800元的旧电脑（当时家里穷，也没钱装网，只能自己在家离线玩）。有了电脑后，各种下电影，软件，学习PS，学习C语言（当时了解到大学肯定要学习这个的），学网页三剑客等等，由于没人指导和交流，就看什么好玩，就学什么。当时一个朋友送了一个花屏的手机，虽然烂，但是起码可以使用。&lt;/p&gt;
&lt;h3 id=&quot;第三台设备&quot;&gt;&lt;a href=&quot;#第三台设备&quot; class=&quot;headerlink&quot; title=&quot;第三台设备&quot;&gt;&lt;/a&gt;第三台设备&lt;/h3&gt;&lt;p&gt;用这个手机看完了海贼王，火影忍者，最后了解到这个手机上也可以安装程序，是 SK芯片 （斯凯）的手机，可以安装 mrp 的应用程序，但是还有展讯芯片的手机，不过貌似很少，这些机子俗称 山寨手机。主要活跃时间在2009年以前，我主要在2008年接触这个东西，每天就看 一些手机网站 mrp 应用的更新，当时智能机都是诺基亚的塞班系统。我当时从各种途径寻找做 mrp 程序的资料，但是安装好以后，有些东西需要在线更新，但是家里没有网，也就没法继续下去，只记得用C语言写过一些小Demo，之后也就没怎么继续下去。&lt;/p&gt;
&lt;h3 id=&quot;我的大学有点怪&quot;&gt;&lt;a href=&quot;#我的大学有点怪&quot; class=&quot;headerlink&quot; title=&quot;我的大学有点怪&quot;&gt;&lt;/a&gt;我的大学有点怪&lt;/h3&gt;&lt;p&gt;上大学后，本以为是非常好的，但是给我感觉一般，社团也就那样，感觉没啥动力，于是自己向计算机需要申请了一个 计算机兴趣小组， 红红火火的弄起来了。将大一的好多班的人都拉了进来，给他们讲东西学习，请C语言老师给我们开小灶，想想就觉得当时很棒。由于当时年轻，不懂得一些东西，慢慢也就没落了，还被人横插一腿。虽然不开心，但是我还是自己继续努力，学校举办的什么计算机大赛总是出现我的身影，绝对拿奖，基本都是第一，第二。&lt;/p&gt;
&lt;h3 id=&quot;内心生出萌芽&quot;&gt;&lt;a href=&quot;#内心生出萌芽&quot; class=&quot;headerlink&quot; title=&quot;内心生出萌芽&quot;&gt;&lt;/a&gt;内心生出萌芽&lt;/h3&gt;&lt;p&gt;然后我听几个学长说要去深圳，北京发展，也在我的心里慢慢萌芽了。大学的时光虽然美好，有各种妹子，各种时间，各种赚钱的机会，但是对我来说都是浮云，我想我还是应该去看看外面的世界。&lt;/p&gt;
&lt;h3 id=&quot;踏上程序员之路&quot;&gt;&lt;a href=&quot;#踏上程序员之路&quot; class=&quot;headerlink&quot; title=&quot;踏上程序员之路&quot;&gt;&lt;/a&gt;踏上程序员之路&lt;/h3&gt;&lt;p&gt;于是在某年的8月8日（我生日那天）不顾爸爸的阻挠，我来到了北京，虽然当时日子很苦，但是如今想想，真开心能做这样的决定。如果我俨然成为了一个架构师，但是我觉得还有很多东西可以做。&lt;/p&gt;
&lt;h3 id=&quot;我所坚持的&quot;&gt;&lt;a href=&quot;#我所坚持的&quot; class=&quot;headerlink&quot; title=&quot;我所坚持的&quot;&gt;&lt;/a&gt;我所坚持的&lt;/h3&gt;&lt;p&gt;平时努力工作，其余时间做点小东西，我始终坚持的就是想到不一定做到，但是要做就做点不一样的。&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;仅此而已，没任何东西值得炫耀，只是想跟大家说说我的一些经历。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编程之路从点滴开启&quot;&gt;&lt;a href=&quot;#编程之路从点滴开启&quot; class=&quot;headerlink&quot; title=&quot;编程之路从点滴开启&quot;&gt;&lt;/a&gt;编程之路从点滴开启&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;今天想随便聊聊，被人问到我是如何走上编程之路的，于是有感而发，特写此
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>标准的Android git和HG的忽略文件是什么样的呢？</title>
    <link href="http://gdky005.com/2016/08/25/%E6%A0%87%E5%87%86%E7%9A%84Android-git%E5%92%8CHG%E7%9A%84%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%91%A2%EF%BC%9F/"/>
    <id>http://gdky005.com/2016/08/25/标准的Android-git和HG的忽略文件是什么样的呢？/</id>
    <published>2016-08-25T03:00:40.000Z</published>
    <updated>2016-08-25T03:46:27.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/gitgit_hg_small.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是忽略文件？&quot;&gt;&lt;a href=&quot;#什么是忽略文件？&quot; class=&quot;headerlink&quot; title=&quot;什么是忽略文件？&quot;&gt;&lt;/a&gt;什么是忽略文件？&lt;/h3&gt;&lt;p&gt;当我们在使用 git 和 HG 管理项目文件的时候，会生成很多的文件，但是这些临时文件并不需要我们提交到我们的服务器去，因此就会使用到忽略文件。&lt;/p&gt;
&lt;h3 id=&quot;忽略文件的作用？&quot;&gt;&lt;a href=&quot;#忽略文件的作用？&quot; class=&quot;headerlink&quot; title=&quot;忽略文件的作用？&quot;&gt;&lt;/a&gt;忽略文件的作用？&lt;/h3&gt;&lt;p&gt;当我们用的不好的时候，就会在提交的时候，有很多凌乱的信息，导致我们提交错误或者冲突。最极端的情况就是把一些需要频繁改动的文件提交到服务器，会造成经常冲突，因此我们需要一份标准的忽略文件。&lt;/p&gt;
&lt;h3 id=&quot;通用的忽略文件&quot;&gt;&lt;a href=&quot;#通用的忽略文件&quot; class=&quot;headerlink&quot; title=&quot;通用的忽略文件&quot;&gt;&lt;/a&gt;通用的忽略文件&lt;/h3&gt;&lt;p&gt;以下提供两种忽略文件的模板，满足大部分需求。&lt;/p&gt;
&lt;h5 id=&quot;1-git-的忽略文件模板：&quot;&gt;&lt;a href=&quot;#1-git-的忽略文件模板：&quot; class=&quot;headerlink&quot; title=&quot;1. git 的忽略文件模板：&quot;&gt;&lt;/a&gt;1. git 的忽略文件模板：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/gitgit.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;请在项目的根目录下创建或者修改这个文件： .gitignore 即可。git相关管理工具会 自动识别该文件，帮我们自动忽略掉不需要的文件。如果我们有其他文件也不用提交的画，可以参考下面的样式添加进去即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*~
.DS_Store

# Android Studio
*.iml
.idea
.gradle

build


# Created by .ignore support plugin (hsz.mobi)
syntax: glob

### Android template
# Built application files
*.apk
*.ap_

# Files for the ART/Dalvik VM
*.dex

# Java class files
*.class

# Generated files
bin/
gen/
out/

# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Proguard folder generated by Eclipse
proguard/

# Log Files
*.log

# Android Studio Navigation editor temp files
.navigation/

# Android Studio captures folder
captures/

# Intellij
*.iml
.idea/workspace.xml

# Keystore files
*.jks
### Eclipse template

.metadata
tmp/
*.tmp
*.bak
*.swp
*~.nib
.settings/
.loadpath
.recommenders

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored &amp;quot;Eclipse launch configurations&amp;quot;
*.launch

# PyDev specific (Python IDE for Eclipse)
*.pydevproject

# CDT-specific (C/C++ Development Tooling)
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# Java annotation processor (APT)
.factorypath

# PDT-specific (PHP Development Tools)
.buildpath

# sbteclipse plugin
.target

# Tern plugin
.tern-project

# TeXlipse plugin
.texlipse

# STS (Spring Tool Suite)
.springBeans

# Code Recommenders
.recommenders/

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
### Example user template template
### Example user template

# IntelliJ project files
.idea
out
gen
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;2-HG-Mercurial-的忽略文件模板：&quot;&gt;&lt;a href=&quot;#2-HG-Mercurial-的忽略文件模板：&quot; class=&quot;headerlink&quot; title=&quot;2. HG/Mercurial 的忽略文件模板：&quot;&gt;&lt;/a&gt;2. HG/Mercurial 的忽略文件模板：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/gitmercurial.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;HG (Mercurial) 的标准忽略文件。这是早期比较好的项目管理工具，但是随着git 的用户群体庞大，git越来越灵活，简单易用，因此 HG也就慢慢退出了我们的视线。最有名的 github 里面也大量使用到git。但是作为一种管理工具，在不同的环境场景下，也可能需要使用HG，尤其是公司的备份管理等，都十分的安全。使用方式很简单，在主项目的根目录下 创建或者修改： .hgignore 文件即可。 这个文件也可以直接放到mode 里面去。 这里提供忽略文件如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Created by .ignore support plugin (hsz.mobi)
syntax: glob

### Android template
# Built application files
*.apk
*.ap_

# Files for the ART/Dalvik VM
*.dex

# Java class files
*.class

# Generated files
bin/
gen/
out/

# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Proguard folder generated by Eclipse
proguard/

# Log Files
*.log

# Android Studio Navigation editor temp files
.navigation/

# Android Studio captures folder
captures/


# Keystore files
*.jks
### Eclipse template

.metadata
tmp/
*.tmp
*.bak
*.swp
*~.nib
.settings/
.loadpath
.recommenders

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored &amp;quot;Eclipse launch configurations&amp;quot;
*.launch

# PyDev specific (Python IDE for Eclipse)
*.pydevproject

# CDT-specific (C/C++ Development Tooling)
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# Java annotation processor (APT)
.factorypath

# PDT-specific (PHP Development Tools)
.buildpath

# sbteclipse plugin
.target

# Tern plugin
.tern-project

# TeXlipse plugin
.texlipse

# STS (Spring Tool Suite)
.springBeans

# Code Recommenders
.recommenders/

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
### Example user template template
### Example user template

# IntelliJ project files
.idea
*.iml
out
gen
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/gitgit_hg_small.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是忽略文件？&quot;&gt;&lt;a href=&quot;#什么是忽略文件？&quot; class=&quot;headerlink&quot;
    
    </summary>
    
    
      <category term="git" scheme="http://gdky005.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp和Okio</title>
    <link href="http://gdky005.com/2016/08/08/OkHttp%E5%92%8COkio/"/>
    <id>http://gdky005.com/2016/08/08/OkHttp和Okio/</id>
    <published>2016-08-08T10:48:10.000Z</published>
    <updated>2016-08-08T10:49:49.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;本文摘要&quot;&gt;&lt;a href=&quot;#本文摘要&quot; class=&quot;headerlink&quot; title=&quot;本文摘要&quot;&gt;&lt;/a&gt;本文摘要&lt;/h3&gt;&lt;p&gt;文本将介绍OkHttp和Okio基本使用&lt;/p&gt;
&lt;h3 id=&quot;OkHttp&quot;&gt;&lt;a href=&quot;#OkHttp&quot; class=&quot;headerlink&quot; title=&quot;OkHttp&quot;&gt;&lt;/a&gt;OkHttp&lt;/h3&gt;&lt;p&gt;HTTP 是现在APP访问网络最流行的方式。通过它我们可以交换数据和媒体信息。而高效的使用HTTP可以让你的加载数据更快并且节省带宽。&lt;/p&gt;
&lt;p&gt;OkHttp就是一种HTTP客户端连接，它有如下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP/2多路复用Socket到同一个主机，共享链接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;采用连接池技术，可以有效的减少Http链接数量。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;无缝集成GZIP压缩技术。&lt;/li&gt;
&lt;li&gt;支持Response Cache，避免重复请求。&lt;/li&gt;
&lt;li&gt;域名多IP支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OkHttp可以处理常见的网络问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果OkHttp连接一个域名失败后，它会尝试连接下一个该域名的IP地址。（&lt;strong&gt;需要DNS支持&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;OkHttp在初始化链接的时候，会采用最新的TLS特性（SNI，ALPN），如果失败会采用TLS1.0进行链接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用OkHttp是非常简单的。它的request/response API采用非常流畅的Builder模式构建。 并且它支持同步阻塞调用以及异步调用。&lt;/p&gt;
&lt;p&gt;OkHttp支持Android2.3+。对于Java最低支持1.7+&lt;/p&gt;
&lt;p&gt;OkHttp会&lt;strong&gt;自动管理HTTP连接的生命周期&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作Response.body().string()等类型的API，OkHttp会自动将该HTTP连接加入到ConnectionPool中或者直接释放连接&lt;/li&gt;
&lt;li&gt;如果采用stream方式操作流，则需要自己手动关闭，否则会发生HTTP连接泄漏（OkHttp通过WeakReference机制，尽最大努力管理这些泄漏的HTTP连接）&lt;/li&gt;
&lt;li&gt;OkHttp不读取Resonse#Head#Keep-Alive属性来决定该HTTP连接是否能复用，而是直接加入到ConnectionPool进行复用&lt;/li&gt;
&lt;li&gt;当从ConnectionPool中获取HTTP连接的时候，OkHttp发现该HTTP连接已经失效，则关闭该连接，并且重新选择一个HTTP连接进行复用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;GET-请求&quot;&gt;&lt;a href=&quot;#GET-请求&quot; class=&quot;headerlink&quot; title=&quot;GET 请求&quot;&gt;&lt;/a&gt;GET 请求&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;package com.company;

import okhttp3.*;

public class Main {

    public static void main(String[] args) throws Exception {
        OkHttpClient client = new OkHttpClient();
        //请求
        Request request = new Request.Builder()
                .url(&amp;quot;http://www.baidu.com/&amp;quot;)
                .get()
                .build();
        //发起请求
        Response response = client.newCall(request).execute();
        //结果
        System.out.println(response.body().string());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;POST-请求&quot;&gt;&lt;a href=&quot;#POST-请求&quot; class=&quot;headerlink&quot; title=&quot;POST 请求&quot;&gt;&lt;/a&gt;POST 请求&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;package com.company;

import okhttp3.*;

public class Main {

    public static void main(String[] args) throws Exception {
        OkHttpClient client = new OkHttpClient();
        //参数
        RequestBody requestBody = new FormBody.Builder()
                .add(&amp;quot;DGM&amp;quot;, &amp;quot;DGM&amp;quot;)
                .build();
        //请求
        Request request = new Request.Builder()
                .url(&amp;quot;http://www.baidu.com/&amp;quot;)
                .post(requestBody)
                .build();
        //发起请求
        Response response = client.newCall(request).execute();
        //结果
        System.out.println(response.body().string());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;引入项目中：&quot;&gt;&lt;a href=&quot;#引入项目中：&quot; class=&quot;headerlink&quot; title=&quot;引入项目中：&quot;&gt;&lt;/a&gt;引入项目中：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt;&lt;br&gt;    &lt;dependency&gt;&lt;br&gt;      &lt;groupid&gt;com.squareup.okhttp3&lt;/groupid&gt;&lt;br&gt;      &lt;artifactid&gt;okhttp&lt;/artifactid&gt;&lt;br&gt;      &lt;version&gt;(insert latest version)&lt;/version&gt;&lt;br&gt;    &lt;/dependency&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gradle&lt;/strong&gt;&lt;br&gt;    compile ‘com.squareup.okhttp3:okhttp:(insert latest version)’&lt;/p&gt;
&lt;p&gt;PS： (insert latest version) 请替换成 官网最新的&lt;/p&gt;
&lt;h3 id=&quot;Okio&quot;&gt;&lt;a href=&quot;#Okio&quot; class=&quot;headerlink&quot; title=&quot;Okio&quot;&gt;&lt;/a&gt;Okio&lt;/h3&gt;&lt;p&gt;Okio是一款新的类库，它可以使得 java.io.* 和 java.nio.* 更加方便的被使用以及处理数据。 现在我的一些文件操作或者流 必用Okio。&lt;/p&gt;
&lt;h3 id=&quot;Copy文件的例子&quot;&gt;&lt;a href=&quot;#Copy文件的例子&quot; class=&quot;headerlink&quot; title=&quot;Copy文件的例子&quot;&gt;&lt;/a&gt;Copy文件的例子&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;package com.company;

import okio.BufferedSink;
import okio.BufferedSource;
import okio.Okio;

import java.io.File;

public class Main {

    public static void main(String[] args) throws Exception {
        //创建buffer
        BufferedSource source = Okio.buffer(Okio.source(new File(&amp;quot;data/file1&amp;quot;)));
        BufferedSink sink = Okio.buffer(Okio.sink(new File(&amp;quot;data/file&amp;quot; + System.currentTimeMillis())));
        //copy数据
        sink.writeAll(source);
        //关闭资源
        sink.close();
        source.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以发现，通过Okio可以非常方便的处理io数据。&lt;/p&gt;
&lt;h3 id=&quot;ByteString-和-Buffer&quot;&gt;&lt;a href=&quot;#ByteString-和-Buffer&quot; class=&quot;headerlink&quot; title=&quot;ByteString 和 Buffer&quot;&gt;&lt;/a&gt;ByteString 和 Buffer&lt;/h3&gt;&lt;p&gt;在Okio中通过ByteString和Buffer这两种类型，提供了高性能和简单的API：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ByteString是一种不可改变的byte序列。提供了一种基于String，采用char访问的二进制模式。通过ByteString可以像一般value一样处理二进制数据。并且提供了对encode/decode中的HEX，Base64以及UTF-8支持。&lt;/li&gt;
&lt;li&gt;Buffer是一种可变的byte序列。就像ArrayList一样，你不需要知道Buffer的大小。在处理buffer的read/write的时候，就像queue一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这两个类，可以极大的增强io访问的数据处理。&lt;/p&gt;
&lt;h3 id=&quot;Source-和-Sink&quot;&gt;&lt;a href=&quot;#Source-和-Sink&quot; class=&quot;headerlink&quot; title=&quot;Source 和 Sink&quot;&gt;&lt;/a&gt;Source 和 Sink&lt;/h3&gt;&lt;p&gt;这两个类是在 InputStream 以及 OutputStream 上进行抽象而成的。 它还具有如下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Timeout： 可以提供超时处理机制。&lt;/li&gt;
&lt;li&gt;Easy to implement： Source 仅仅声明了read，close，timeout方法。实现起来非常的方便。&lt;/li&gt;
&lt;li&gt;Easy to use：通过实现/使用BufferedSource和BufferedSink接口，可以更加方便的操作二进制数据。&lt;/li&gt;
&lt;li&gt;No artificial distinction between byte streams and char streams：可以非常方便的将二进制数据处理为UTF-8字符串，int等类型数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Source 和 Sink 实现了InputStream 以及 OutputStream。你可以将Source看成InputStream，将Sink看成OutputStream。&lt;strong&gt;而通过BufferedSource和BufferedSink可以非常方便的进行数据处理。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;通过开源的square工具，我们可以非常方便的处理io以及http数据。在最新的Android6.0+中，已经剔除了Apache URLConnection类，而采用OkHttp。所以可见OkHttp的代码质量还有有保证的。&lt;/p&gt;
&lt;h5 id=&quot;链接：&quot;&gt;&lt;a href=&quot;#链接：&quot; class=&quot;headerlink&quot; title=&quot;链接：&quot;&gt;&lt;/a&gt;链接：&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/square/okio&quot; title=&quot;Okio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Okio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://square.github.io/okhttp/&quot; title=&quot;OkHttp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkHttp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/darkgem/blog/643980&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来源&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文摘要&quot;&gt;&lt;a href=&quot;#本文摘要&quot; class=&quot;headerlink&quot; title=&quot;本文摘要&quot;&gt;&lt;/a&gt;本文摘要&lt;/h3&gt;&lt;p&gt;文本将介绍OkHttp和Okio基本使用&lt;/p&gt;
&lt;h3 id=&quot;OkHttp&quot;&gt;&lt;a href=&quot;#OkHttp&quot; cla
    
    </summary>
    
    
      <category term="OkHttp,Okio" scheme="http://gdky005.com/tags/OkHttp-Okio/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS的七个误解</title>
    <link href="http://gdky005.com/2016/07/25/HTTPS%E7%9A%84%E4%B8%83%E4%B8%AA%E8%AF%AF%E8%A7%A3/"/>
    <id>http://gdky005.com/2016/07/25/HTTPS的七个误解/</id>
    <published>2016-07-25T03:20:13.000Z</published>
    <updated>2016-07-25T03:25:45.000Z</updated>
    
    <content type="html">&lt;p&gt;这段时间在研究 webview 缓存，为了加快用户进入页面的时间，找了一些资料，突然发现 对 Https 理解的不是很深刻，这里整理一下。&lt;/p&gt;
&lt;p&gt;我认为不管是 IOS 同学还是 Android 同学，都应该对此有一定的了解。这篇文章的年底略有久远，但是却可以扫盲，还是值得一看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021311.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;误解七：HTTPS无法缓存&quot;&gt;&lt;a href=&quot;#误解七：HTTPS无法缓存&quot; class=&quot;headerlink&quot; title=&quot;误解七：HTTPS无法缓存&quot;&gt;&lt;/a&gt;误解七：HTTPS无法缓存&lt;/h3&gt;&lt;p&gt;许多人以为，出于安全考虑，浏览器不会在本地保存HTTPS缓存。实际上，只要在HTTP头中使用特定命令，HTTPS是可以缓存的。&lt;/p&gt;
&lt;p&gt;微软的IE项目经理Eric Lawrence写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“说来也许令人震惊，只要HTTP头允许这样做，所有版本的IE都缓存HTTPS内容。比如，如果头命令是Cache-Control: max-age=600，那么这个网页就将被IE缓存10分钟。IE的缓存策略，与是否使用HTTPS协议无关。（其他浏览器在这方面的行为不一致，取决于你使用的版本，所以这里不加以讨论。）”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Firefox默认只在内存中缓存HTTPS。但是，只要头命令中有Cache-Control: Public，缓存就会被写到硬盘上。下面的图片显示，Firefox的硬盘缓存中有HTTPS内容，头命令正是Cache-Control:Public。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021301.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;误解六：SSL证书很贵&quot;&gt;&lt;a href=&quot;#误解六：SSL证书很贵&quot; class=&quot;headerlink&quot; title=&quot;误解六：SSL证书很贵&quot;&gt;&lt;/a&gt;误解六：SSL证书很贵&lt;/h3&gt;&lt;p&gt;如果你在网上搜一下，就会发现很多便宜的SSL证书，大概10美元一年，这和一个.com域名的年费差不多。而且事实上，还能找到免费的SSL证书。&lt;br&gt;在效力上，便宜的证书当然会比大机构颁发的证书差一点，但是几乎所有的主流浏览器都接受这些证书。&lt;/p&gt;
&lt;h3 id=&quot;误解五：HTTPS站点必须有独享的IP地址&quot;&gt;&lt;a href=&quot;#误解五：HTTPS站点必须有独享的IP地址&quot; class=&quot;headerlink&quot; title=&quot;误解五：HTTPS站点必须有独享的IP地址&quot;&gt;&lt;/a&gt;误解五：HTTPS站点必须有独享的IP地址&lt;/h3&gt;&lt;p&gt;由于IPv4将要分配完毕，所以很多人关心这个问题。每个IP地址只能安装一张SSL证书，这是毫无疑问的。但是，如果你使用子域名通配符SSL证书（wildcard SSL certificate，价格大约是每年125美元），就能在一个IP地址上部署多个HTTPS子域名。比如，&lt;a href=&quot;https://www.httpwatch.com和https://store.httpwatch.com，就共享同一个IP地址。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.httpwatch.com和https://store.httpwatch.com，就共享同一个IP地址。&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021302.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外，UCC（统一通信证书，Unified Communications Certificate）支持一张证书同时匹配多个站点，可以是完全不同的域名。SNI（服务器名称指示，Server Name Indication）允许一个IP地址上多个域名安装多张证书。服务器端，Apache和Nginx支持该技术，IIS不支持；客户端，IE 7+、Firefox 2.0+、Chrome 6+、Safari 2.1+和Opera 8.0+支持。&lt;/p&gt;
&lt;h3 id=&quot;误解四：转移服务器时要购买新证书&quot;&gt;&lt;a href=&quot;#误解四：转移服务器时要购买新证书&quot; class=&quot;headerlink&quot; title=&quot;误解四：转移服务器时要购买新证书&quot;&gt;&lt;/a&gt;误解四：转移服务器时要购买新证书&lt;/h3&gt;&lt;p&gt;部署SSL证书，需要这样几步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在你的服务器上，生成一个CSR文件（SSL证书请求文件，SSL Certificate Signing Request）。&lt;/li&gt;
&lt;li&gt;使用CSR文件，购买SSL证书。&lt;/li&gt;
&lt;li&gt;安装SSL证书。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些步骤都经过精心设计，保证传输的安全，防止有人截取或非法获得证书。结果就是，你在第二步得到的证书不能用在另一台服务器上。如果你需要这样做，就必须以其他格式输出证书。&lt;br&gt;比如，IIS的做法是生成一个可以转移的.pfx文件，并加以密码保护。&lt;br&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021303.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将这个文件传入其他服务器，将可以继续使用原来的SSL证书了。&lt;/p&gt;
&lt;h3 id=&quot;误解三：HTTPS太慢&quot;&gt;&lt;a href=&quot;#误解三：HTTPS太慢&quot; class=&quot;headerlink&quot; title=&quot;误解三：HTTPS太慢&quot;&gt;&lt;/a&gt;误解三：HTTPS太慢&lt;/h3&gt;&lt;p&gt;使用HTTPS不会使你的网站变得更快（实际上有可能，请看下文），但是有一些技巧可以大大减少额外开销。&lt;br&gt;首先，只要压缩文本内容，就会降低解码耗用的CPU资源。不过，对于当代CPU来说，这点开销不值一提。&lt;br&gt;其次，建立HTTPS连接，要求额外的TCP往返，因此会新增一些发送和接收的字节。但是，从下图可以看到，新增的字节是很少的。&lt;br&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021304.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一次打开网页的时候，HTTPS协议会比HTTP协议慢一点，这是因为读取和验证SSL证书的时间。下面是一张HTTP网页打开时间的瀑布图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021305.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;同一张网页使用HTTPS协议之后，打开时间变长了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021306.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;建立连接的部分，大约慢了10%。但是，一旦有效的HTTPS连接建立起来，再刷新网页，两种协议几乎没有区别。先是HTTP协议的刷新表现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021307.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后是HTTPS协议：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021308.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;某些用户可能发现，HTTPS比HTTP更快一点。这会发生在一些大公司的内部局域网，因为通常情况下，公司的网关会截取并分析所有的网络通信。但是，当它遇到HTTPS连接时，它就只能直接放行，因为HTTPS无法被解读。正是因为少了这个解读的过程，所以HTTPS变得比较快。&lt;/p&gt;
&lt;h3 id=&quot;误解二：有了HTTPS，Cookie和查询字符串就安全了&quot;&gt;&lt;a href=&quot;#误解二：有了HTTPS，Cookie和查询字符串就安全了&quot; class=&quot;headerlink&quot; title=&quot;误解二：有了HTTPS，Cookie和查询字符串就安全了&quot;&gt;&lt;/a&gt;误解二：有了HTTPS，Cookie和查询字符串就安全了&lt;/h3&gt;&lt;p&gt;虽然无法直接从HTTPS数据中读取Cookie和查询字符串，但是你仍然需要使它们的值变得难以预测。&lt;br&gt;比如，曾经有一家英国银行，直接使用顺序排列的数值表示session id:&lt;br&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021309.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;黑客可以先注册一个账户，找到这个cookie，看到这个值的表示方法。然后，改动cookie，从而劫持其他人的session id。至于查询字符串，也可以通过类似方式泄漏。&lt;/p&gt;
&lt;h3 id=&quot;误解一：只有注册登录页，才需要HTTPS&quot;&gt;&lt;a href=&quot;#误解一：只有注册登录页，才需要HTTPS&quot; class=&quot;headerlink&quot; title=&quot;误解一：只有注册登录页，才需要HTTPS&quot;&gt;&lt;/a&gt;误解一：只有注册登录页，才需要HTTPS&lt;/h3&gt;&lt;p&gt;这种想法很普遍。人们觉得，HTTPS可以保护用户的密码，此外就不需要了。Firefox浏览器新插件Firesheep，证明了这种想法是错的。我们可以看到，在Twitter和Facebook上，劫持其他人的session是非常容易的。&lt;br&gt;咖啡馆的免费WiFi，就是一个很理想的劫持环境，因为两个原因：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;这种WiFi通常不会加密，所以很容易监控所有流量。&lt;/li&gt;
&lt;li&gt;WiFi通常使用NAT进行外网和内网的地址转换，所有内网客户端都共享一个外网地址。这意味着，被劫持的session，看上去很像来自原来的登录者。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;以Twitter为例，它的登录页使用了HTTPS，但是登录以后，其他页面就变成了HTTP。这时，它的cookie里的session值就暴露了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201102/bg2011021310.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是说，这些cookie是在HTTPS环境下建立的，但是却在HTTP环境下传输。如果有人劫持到这些cookie，那他就能以你的身份在Twitter上发言了。&lt;/p&gt;
&lt;h3 id=&quot;引用地址：&quot;&gt;&lt;a href=&quot;#引用地址：&quot; class=&quot;headerlink&quot; title=&quot;引用地址：&quot;&gt;&lt;/a&gt;引用地址：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.httpwatch.com/2011/01/28/top-7-myths-about-https/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.httpwatch.com/2011/01/28/top-7-myths-about-https/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间在研究 webview 缓存，为了加快用户进入页面的时间，找了一些资料，突然发现 对 Https 理解的不是很深刻，这里整理一下。&lt;/p&gt;
&lt;p&gt;我认为不管是 IOS 同学还是 Android 同学，都应该对此有一定的了解。这篇文章的年底略有久远，但是却可以扫盲，还
    
    </summary>
    
    
      <category term="https" scheme="http://gdky005.com/tags/https/"/>
    
  </entry>
  
</feed>
