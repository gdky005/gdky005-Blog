<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独狂饮</title>
  <subtitle>只要有百分之一的梦想，就要付出百分之百的努力。努力不一定成功，但是不努力就一定不会成功！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gdky005.com/"/>
  <updated>2016-07-08T08:12:39.000Z</updated>
  <id>http://gdky005.com/</id>
  
  <author>
    <name>gdky005</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个五年Android开发者百度、阿里、聚美、映客的面试心经</title>
    <link href="http://gdky005.com/2016/07/08/%E4%B8%80%E4%B8%AA%E4%BA%94%E5%B9%B4Android%E5%BC%80%E5%8F%91%E8%80%85%E7%99%BE%E5%BA%A6%E3%80%81%E9%98%BF%E9%87%8C%E3%80%81%E8%81%9A%E7%BE%8E%E3%80%81%E6%98%A0%E5%AE%A2%E7%9A%84%E9%9D%A2%E8%AF%95%E5%BF%83%E7%BB%8F/"/>
    <id>http://gdky005.com/2016/07/08/一个五年Android开发者百度、阿里、聚美、映客的面试心经/</id>
    <published>2016-07-08T04:13:29.000Z</published>
    <updated>2016-07-08T08:12:39.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;花絮&quot;&gt;&lt;a href=&quot;#花絮&quot; class=&quot;headerlink&quot; title=&quot;花絮&quot;&gt;&lt;/a&gt;花絮&lt;/h3&gt;&lt;p&gt;本文为完整版，加了一些彩蛋哦！文末有面试和必备的技能点总结。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也许会有人感叹某些人的运气比较好，但是他们不曾知道对方吃过多少苦，受过多少委屈。某些时候就是需要我们用心去发现突破点，然后顺势而上，抓住机遇，那么你将会走向另外一条大道，成就另外一个全新的自我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先简单说说我最近的面试经历吧。面试的公司很多，其中有让我心血沸腾的经历，也有让我感到失望到无助的经历，我将这些体会都记录下来，细想之后很值得，面了这么多公司，要是最后什么也没有留下来，那就太浪费了。至少对于我来说有些东西在整理总结之后才能得到一个肯定的答案。希望这些能对即将换工作或者打算看看机会的你有一些帮助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下文真的很长，你可以把这篇文章当做看小说一样，快速浏览一下，但是希望你能将文中提到的那些技能掌握。那也就不枉费我花了一两天时间专门整理这些。我的这些经验仅供参考，希望你能做的比我好，同时希望你在以后的面试中能轻松应对。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为何离职？&quot;&gt;&lt;a href=&quot;#为何离职？&quot; class=&quot;headerlink&quot; title=&quot;为何离职？&quot;&gt;&lt;/a&gt;为何离职？&lt;/h3&gt;&lt;p&gt;先从我的换工作的动机开始说吧。&lt;/p&gt;
&lt;p&gt;公司裁员的时候老大说:『你就留下好好干吧，以后不管公司怎么分股票、期权，肯定少不了你』。我非常信任我的老大，跟着老大一起工作，感觉是一种享受。&lt;/p&gt;
&lt;p&gt;但是没想到裁员后，公司内部大动荡，主业务线从客户端A 业务线转移到另外的B 业务线上。我主要负责A客户端的架构，这下可真闲下来了。B 业务线那边的业务量还是很忙的，没时间配合我做一些架构上的事情。于是我每天就看看资料，补充点能量。&lt;/p&gt;
&lt;p&gt;呆了几天后，就后悔当初没有拿 N+1 走，有一种被老大忽悠的感觉。 因为公司接下来的操作让我很是不爽，先是晚上打车不能超过30，然后福利大减，瞬间没有工作的心情了。再过了一两周后公司宣布新一轮融资成功，可惜只融到了 2千多万美元（按照预期应会更高），然后接着招新人。&lt;/p&gt;
&lt;p&gt;我特么无语了，站在公司的角度是没有任何问题的，可以节省开销，也可以容纳新鲜血液。但是我作为一个老员工，心寒，走的员工都拿到了 N+1，我们这些老员工什么也没有得到，反而福利大减，伤人啊! 现在即使我想走，什么也得不到，一种莫名的恼火涌上心头（只怪本人经历尚浅，看不清一些大的趋势，还是老鸟们聪明，拿钱走人，然后换一个新工作，好不自在啊）。&lt;/p&gt;
&lt;p&gt;不过理智分析一些这样确实有好处，可以给自己留很多的时间来选择更好的公司。就如此刻的我一样，在公司悠闲的上着班，骑驴找马，遇到合适的，可以立刻走。其实细想一下，如果我当时拿了 N+1 走了后，可能会迫切的需要一份合适的工作，然后迅速入职。至于新公司怎么样，还真不敢确定。&lt;/p&gt;
&lt;p&gt;已经动了想走的心，意味着再也不可能在这里很安分的待下去了。&lt;/p&gt;
&lt;h3 id=&quot;面试分级&quot;&gt;&lt;a href=&quot;#面试分级&quot; class=&quot;headerlink&quot; title=&quot;面试分级&quot;&gt;&lt;/a&gt;面试分级&lt;/h3&gt;&lt;p&gt;于是我决定开始投递简历（世界那么大，我想去外面的世界看看）。这次看机会与往常不同，我决定好好准备一番，然后开始投递简历，主要渠道是 “X钩”，辅助渠道是猎头。&lt;/p&gt;
&lt;p&gt;这次看机会我将所有公司分为三类： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A类： BAT公司，非常靠谱，各项待遇都是很优厚的&lt;/li&gt;
&lt;li&gt;B类：一些知名的互联网公司（基本都在C轮以上），基本很靠谱，该有的都少不了&lt;/li&gt;
&lt;li&gt;C类：就是那些正在招聘的公司，没啥名气，虽然钱多但是事也多。靠不靠谱真还不知道，只能碰运气&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基础知识不可少&quot;&gt;&lt;a href=&quot;#基础知识不可少&quot; class=&quot;headerlink&quot; title=&quot;基础知识不可少&quot;&gt;&lt;/a&gt;基础知识不可少&lt;/h3&gt;&lt;p&gt;以前我基本都是直接去面试，总以为Android工作好几年了，出去面试基本没啥问题，因此带着那份傲娇的自信 总是碰壁，尤其遇到很多基础性的问题，一时真不知道怎么回答？还有一些问题之前都记得很准确，但是在面试官问的时候，就一个大写的懵逼表情。&lt;/p&gt;
&lt;p&gt;在我出去面试之前，我已经把 《大话数据结构》 基本看完了（想想我之前的生活，每天早上七点多起床，然后看几页，洗漱完就去公司）。虽然没怎么记住，但是遇到这些相关问题，还是能很容易回答出来的。因为有了以前的教训，而且这次我也是很认真的准备了好久（可以说蓄谋已久啦，我心里其实很明白互联网公司可能存在很多风险，尤其是没有盈利的公司，唯有技术这东西必须牢牢掌握住，才能立于不败之地），因此我准备把Java基础巩固下，但是手头没啥合适的书籍和资料。&lt;/p&gt;
&lt;p&gt;还好民间有很多厉害的开发者，他们不以盈利为目的，只为完成某种需求，开发一款 app,然后发布到应用市场，给需要的人。于是我就找到一个 “Java面试训练” 的App,下载量还可以，就安装到手机上，开启刷题模式，应该刷了10来天吧（都是在上班，下班时间看一点，虽然时间比较零散，但是这样记得最深刻）。在之后的面试中，基本很少遇见一些奇葩的java基础。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里不得不提一件事，那就是从 app 崛起的那一刻起，就有很多的 中间商，一个小作坊的屋子里有很多电脑或者不知名的设备，屋子里慢慢的数据线，犹如蜘蛛网一样连接着很多设备，做着一些神秘的事情。不用我说你们应该也知道他们做着一些很肮脏的事情，我就不细说干什么了，简单举个例子：这群人的老大看中某个市场上某款游戏非常火爆，或者 app 特别的火，于是通过反编译等技术修改这些 app,然后重新打包上线到一些不是很知名的app 渠道或者小型应用时长，还有一些论坛，一旦有用户下载，就会在 app中弹出广告，在游戏中做各种充值操作，甚至在你无意间点到一个按钮就会自动扣除你的话费。这是前几年干的事情，新闻中也纰漏了很多，这里只能说监管不力。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;但是随后各个公司都意识到这样的安全问题于是有了 app加固的技术，无法修改 app,即便修改了，但是也运行不起来，所以一定要注重安全性问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;刚踏入架构师之路的经历&quot;&gt;&lt;a href=&quot;#刚踏入架构师之路的经历&quot; class=&quot;headerlink&quot; title=&quot;刚踏入架构师之路的经历&quot;&gt;&lt;/a&gt;刚踏入架构师之路的经历&lt;/h3&gt;&lt;p&gt;这次我给自己的规划是做一个架构师，但是我深知架构师可不是闹着玩的，必须要有很强的一面，因此我在简历里面写的只是“架构师方向”。我在K公司 做得是架构师方向，因此我觉得有必要朝着这个方向发力，虽然现在不是很厉害，但是坚持一两年后，即使不是非常厉害，但是也距离非常厉害很近（这里使用了《孙子兵法》的一句：“求其上,得其中;求其中,得其下,求其下,必败。” ）。&lt;/p&gt;
&lt;p&gt;这个想法来源于在K 公司我第一任leader曾经跟我说过的话：『对于新东西，如果你觉得掌握了，但是不应用到项目里面来，是没有什么意义的，时间长了还是会忘记的。』我很庆幸我有一个好老大（我是属于双领导型的，K 公司 A项目的负责人是我的leader，但是我的直接汇报对象是 K 公司的副技术总监，下文就成为老大），用他的话来说就是经常踢着我的屁股走。&lt;/p&gt;
&lt;p&gt;当我在网上了解到很多实用的新技术时，跟他随意吐露一句话，他就能非常用心的倾听我的想法，并鼓励我将这些东西带入到项目中来。从那以后我就开始看很多新技术，感觉合适的会引进到我们的项目中。从之后的证明中来看，是非常有价值的。&lt;/p&gt;
&lt;p&gt;曾经遇到的情况是这样的：当我刚进入K公司后，打杂一个多月，就被关到了 小黑屋（呜呜呜，好可怕的小黑屋，996的制度）。然后才开始正常的架构师之路，第一步就是统一开发环境，在我来公司后，我发现公司的android同事用的开发工具种类真是繁多啊，神马 Eclipse、IntelliJ IDEA、Android Studio、Windows、Ubuntu、Mac。刚进公司的时候我曾经用鄙夷的眼神看过那些 Eclipse 的童鞋，真是无力吐槽了。于是我给 老大说：『咱们的开发环境最好统一起来，现在各式各样的工具，弄个东西真费劲。』于是老大二话不说，就在群里跟大家吼，都务必切换到 Android Studio（以下简称 AS），由我来监督并执行。于是我拿着鸡毛当令箭，给大伙把地址什么的都找好，发到群里去，让他们自己下载（后期我们就搭建了 ftp服务器将这些常用的工具都放在里面，省的再去下载了）。 翻墙工具我使用 goagent（不怎么稳定），给其他人分享也太费劲了，因此让他们自己搞定。老大自己有一个 VPS，于是给大伙共享后，环境基本就统一了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;期间有一个小插曲：&lt;br&gt;一个年龄 比我大的同事在用 Eclipse，在我推广我的 AS 时，他说比较忙，没时间弄。我就急了，因为我刚到公司不久，老大分配给我的任务，推行不下去，这可不行啊，没说几句吵起来了。最后我也知道不能太着急，但是已经吵了，关系肯定不咋样，老大当时开会去了，我知道自己太心虚了，因此主动给老大承认错误，说我和那谁谁吵架了，因为他不用AS。最后在老大的劝说下，这个人就勉强切换到 AS了。&lt;br&gt;其实这个人就是我之后的新Leader，每每想到这里我就全身发冷汗，Leader要虐你，你还能有好活路么？还好这个Leader人比较好，人也比较大气会处事，不怎么跟我计较。我已经对着佛祖忏悔了N多次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第一天面试&quot;&gt;&lt;a href=&quot;#第一天面试&quot; class=&quot;headerlink&quot; title=&quot;第一天面试&quot;&gt;&lt;/a&gt;第一天面试&lt;/h3&gt;&lt;p&gt;我用 “X钩” 开始捡一些不怎么有名的C 类公司投递，很快就收到了很多的 面试邀请。&lt;/p&gt;
&lt;h5 id=&quot;首次面试——国外输入法&quot;&gt;&lt;a href=&quot;#首次面试——国外输入法&quot; class=&quot;headerlink&quot; title=&quot;首次面试——国外输入法&quot;&gt;&lt;/a&gt;首次面试——国外输入法&lt;/h5&gt;&lt;p&gt;记得当时去的第一家公司是做国外做输入法的，做的还不错。从外面能看见一栋略微有点老的大厦，办公环境很一般。&lt;/p&gt;
&lt;p&gt;进去后很巧的是遇见了一个熟人，第一位面试官竟然认识我之前在X游的一个同事，然后我们就聊开了，他也没怎么难为我，就问了我几个很简单的问题，例如：handler的原理，多线程。我按照记忆中的样子说给他听，然后就第一关就轻松过了。&lt;/p&gt;
&lt;p&gt;等了一会，另外一个面试官进来了，问了一长串问题，基本就是 Android的相关的基础，然后第二个又轻松过了。&lt;/p&gt;
&lt;p&gt;等到第三关的时候，一个年龄稍微大的人进来了，很容易能看出，这个人应是该技术团队的负责人，问了一些工作经历后，然后问了一个最让我印象深刻的问题是：『你了解过Android上的黑科技么？比如Android 5.0 之上有一个辅助功能，如果用户开启后，就能像豌豆荚那样自动安装app,等同于拥有了root权限，但是手机重启后，这个就自动关闭了，有没有办法可以自动打开呢？』据他了解，有很多不知名的小App 都实现了，但是很多大公司都没用。 我想好好一会，说可能这些app 被厂商列入了白名单，因此重启手机后还能自动打开那个辅助功能。我实在想不出如何能实现这样的效果。最后他告诉我，其实他们也是分析了好久，才发现，那些小App, 都是开启了一个进程（或者是service，具体记不清了，有兴趣的童鞋可以试试）来守护，因此能够开启。这么一说，我也瞬间明白了。&lt;/p&gt;
&lt;p&gt;但同时我提到这样做会可能会导致耗电量增加啊，对方的一句话把我真雷住了。“那能费多少电。。。” ，我瞬间无语了。但是他们可能因为某些需求必须如此做，因此要实现这样的功能，相对于电量来说应该也能接受，不至于比什么都玩不了的强，体验也确实提升了很多。不用用户每次去开启那个开关，虽然有点风险，但是相对于Android上的风险来说，确实低很多。&lt;/p&gt;
&lt;p&gt;等第三轮面试完成后，然后Hr 小妹妹带我到一个很大的会议室，见到一个很年轻的人，听Hr说，这个人应是CEO之类的，反正职称很高。他就问了些职业规划，平时有什么兴趣爱好，以后有什么打算，薪资要多少？我说到公司后可以先接触一些业务层面的东西，然后慢慢再走架构路线，之后可以负责主要核心模块。平时就看看书，参加沙龙活动，没事打打游戏。以后还是要像架构师方向进发的，期望薪资20K+。他也简单回答我一些问题。之后就是让我先走，等通知。&lt;/p&gt;
&lt;p&gt;傻傻的我还就这样高兴的走了，因为我总体感觉还是很棒的，毕竟连过4轮哈。从最后的结果中能明白，其实应该是要的薪资太高了。为什么这么说呢？因为一般情况下，最后一轮就是简单看看你这个人怎么样，技术关肯定没问题，否则前三关就 pass 了。可能对方觉得你要的薪资和你的实力不符合，也可能他们想再对比看看，选择一个更合适的人选。&lt;/p&gt;
&lt;h5 id=&quot;58到家&quot;&gt;&lt;a href=&quot;#58到家&quot; class=&quot;headerlink&quot; title=&quot;58到家&quot;&gt;&lt;/a&gt;58到家&lt;/h5&gt;&lt;p&gt;从上一家公司面过后，我就紧接着去第二家公司 58到家，在大屯路东地铁站附近。到了后刚好12点，电话联系后，他们说班车司机都午休去了，要等到2点才能过去（58到家面试需要从地铁站做班车过去，路程还算能接受的）。然后我就吃了点饭，在附近网吧 撸一局，看时间点差不多了，我就去那块坐车了，差不多走了5分钟做就到了。&lt;/p&gt;
&lt;p&gt;北苑路北美国际商务中心，这块有很多公司，什么珍爱网之类的都在那附近。&lt;/p&gt;
&lt;p&gt;第一轮面试我的是一个小伙，问了一些基本的Android基础，然后问了一下 android的绘图原理，我说： onMeasure, onLayout, onDraw。 然后他说每一个什么作用？ 那个onMeasuer主要做什么的？并举了一个例子：一个自定义的滚动View A里面如何放另外一个滚动的View B？我说把 View B将 onMeasure 里面的高设置成最大，这样就能解决冲突问题。最后他简单说了一些 onMeasure 里面的几个参数，我对此加深了解了。&lt;/p&gt;
&lt;p&gt;第一关也就这样过去了，等到第二关的时候看起来一个挺帅气的男人带着一个很显眼的婚戒跟我说一些项目流程上的东西，因为我在K 公司这块跟老大接触的比较多，因此一般问题难不住我，轻松就过了。&lt;/p&gt;
&lt;p&gt;等到第三关的时候，问我一些工作经历，然后问问职业发展规划，平时的兴趣爱好，以及你觉得得你和其他人有什么优势。我挺好奇的，为什么最后的这些面试官都要问类似的问题，之后从一个关系还不错的猎头那里了解到，其实他们也就是了解下以后的动向，以及看看这个人的人品。关于优势我是这么说的：我说到公司后可以先接触一些业务层面的东西，然后慢慢再走架构路线，之后可以负责主要核心模块。其实和上面的回答一样，这基本就是所说的套路。他们可以用套路，我们为何不可呢？ 嘿嘿，别学我，自己根据实际情况来。&lt;/p&gt;
&lt;p&gt;本以为就结束了，没想到他们说 CTO不在，可能还有复试，先让HR大美女跟我谈谈。HR慢条斯理的跟我说了一些待遇什么的，了解了下我的状况，问我要多少。我基本和上一个公司说的一个样。&lt;/p&gt;
&lt;p&gt;之后再来复试的时候，这个大美女HR给我了一些建议，说这个CTO是阿里出来的，喜欢会说话的人，想到什么就说什么，别紧张。在这面的时候，我就很放松，该怎么说就怎说，他也问了一些职业发展规划，以及我的经历，基本10来分钟就结束。我只想说大美女 HR 真真是体贴入微，感觉很 Nice, 这轮基本也顺利过了。之后这个HR直接说我被评为T5，达不到架构师的标准，但是以后可以努力，给我 20K+，我也欣然接受了。不管怎么样，反正拿到offer再说，之后慢慢对比。&lt;/p&gt;
&lt;h5 id=&quot;楚楚街&quot;&gt;&lt;a href=&quot;#楚楚街&quot; class=&quot;headerlink&quot; title=&quot;楚楚街&quot;&gt;&lt;/a&gt;楚楚街&lt;/h5&gt;&lt;p&gt;说起这第三家 楚楚街 我就一肚子火，也不是说第三家不好，只是在去的路上让我备受折磨。从大屯路东 到 知春路，坐地铁应该几十分钟就到了。当时已经快四点了，5点面试，然后我就打算坐车去（不想再挤地铁了，想轻轻松松的过去），特么的为了省那几块钱，我选择拼车，在路上本以为只需要最多一个小时就到，没想到花了我1个半小时(只能感叹北京的车真多，路上堵的不行不行的)。哎，到他们公司的时候都快6点了，还好我提前在电话里和HR说过，他们说6点也是可以的。于是第三个面试就开始了。&lt;/p&gt;
&lt;p&gt;首先过来第一位面试官，看样子应该是 Android 技术 leader，开始问了我一些基础的面试题，比如：View 的事件分发机制，View的绘图，ListView 的实现原理（这个应该是几年前面试的时候经常问题，没想到现在也能遇见）。聊了好一会，然后他拿出他们的客户端给我演示了一个页面，说这个界面比较卡顿，让我分析下原因。我看过后，提出了几个有效的检测卡顿的方案，他们的这个界面主要是Listview 的 item 里面包含了一个 viewpager，然后 viewpager 的 item 里面有一个大view, 上面有N 多图片 + 动画效果，因此实现起来很麻烦,最后导致性能卡顿（不得不说产品同学，你的想象力真丰富啊，有没有考虑过研发同学的心情）。然后，他感觉得到了共鸣，因此接下来说话就比较放松了，他说和我年龄差不多，感觉我还是很厉害的（我不禁惶恐不安，我感觉还行，但是应该不是他说的很厉害，可能只是工作时间长了，该积累下来的东西大部分都有了），互留了微信，方便以后的交流（事实是没有啥交流的，只是当你面试通过后，可以有一个拉你入伙的渠道，嘿嘿，不晓得对不）。&lt;/p&gt;
&lt;p&gt;第二个进来的面试官长得挺帅气的，手上戴着戒指（之所以提到这个，是因为在我在我的印象中这个最亮眼，很多次在和他交流的过程中，我都比较紧张，我就盯着这块看用来放松，说真的如果看着对方的眼睛，双方可能都不会自在，当然除非你很有自信的时候是可以的）。开始简单问了下工作经历，然后就开始聊技术，第一个就是问我知道不知道 二分法，我当时楞了一下，猛然间反应不过来，最后专门确认问了下是不是 二分查找。然后我说在一个数组里面每次查找的时候从中间点开始对比，大于就右边找，小于就左边找，顺带提了一句这要在一个顺序的数组里面。然后面试官就说，二分查找还得每次先排一次序？我当时说是的，结果就感觉很2，可能没理解清楚面试官表达的是什么或者说我的表达有问题，其实我想说最开始的数组就是一个有序数组，但是面试官可能误解了我的意思，以为每次查到后，都要先排一次序（只能说悲催啊）。&lt;/p&gt;
&lt;p&gt;这个问题过了后就再问了我一个问题：『你来说说 Java 的内存管理。』这个问题在一两年前上就栽过跟头，所以当时专门看过相关文章。但是当我回答的时候，由于长时间没怎么看过了，记忆有点松动，大体的说出来了，但是不够准确（回去后就好好补充了下，在之后的面试过程中遇到的概率还是非常大的，尤其在第二面的时候）。然后他问我要多少薪资，我当时说 20K+，然后他就问我是不是可以低一些呢？我开始说可以低一点，但是当他问低多少的时候，我心想上面两个公司的 offer 基本感觉到手了，这个可以适当的要高点，能给就来，给不了那就算了（我事后想想才明白，这种2B 的想法绝对不能有，要时刻保持低调，把握住任何一次机会）。最后他说，我得对得起兄弟们（怎么说呢？估计是刚回答的时候不是特别的满意，还有感觉我要的太高了），你这个薪资我没法跟上面谈。然后可想而知，当然肯定没有结果了。&lt;/p&gt;
&lt;p&gt;因此奉劝各位，要时刻保持低调，谦虚谨慎，莫要装B，否则肯定遭雷劈，我这就是一个活生生的例子。&lt;/p&gt;
&lt;h3 id=&quot;第二轮B-类公司面试：&quot;&gt;&lt;a href=&quot;#第二轮B-类公司面试：&quot; class=&quot;headerlink&quot; title=&quot;第二轮B 类公司面试：&quot;&gt;&lt;/a&gt;第二轮B 类公司面试：&lt;/h3&gt;&lt;p&gt;面试有很多，说起来可能会长篇大论，以下就总结性的说说，不再说明具体细节，只说我们之后在面试的时候应该注意的地方，以及他们对应聘者的要求。&lt;/p&gt;
&lt;h5 id=&quot;映客-amp-amp-蘑菇街&quot;&gt;&lt;a href=&quot;#映客-amp-amp-蘑菇街&quot; class=&quot;headerlink&quot; title=&quot;映客 &amp;amp;&amp;amp; 蘑菇街&quot;&gt;&lt;/a&gt;映客 &amp;amp;&amp;amp; 蘑菇街&lt;/h5&gt;&lt;p&gt;映客直播在望京soho,很高大上的地方，t1,t2,t3分别对应从低到高的大楼。到公司后，感觉还可以，第一个面我的人是一个技术，基本就问到一些Android 的面试题，没有任何悬念就过了，第二面的时候，感觉那个人还是比较随和的，问了 Java 内存管理的东西，以及一些其他的问题，最后还都聊得挺开心，第三面的时候直接就是 HR谈薪资，很容易就过了。&lt;/p&gt;
&lt;p&gt;在望京 soho 还去过 蘑菇街，里面的人技术比较好，我当时过去的时候已经6点了。那个面试官就跟我聊人生理想，提到一些 Android系统原理性的东西，但是感觉回答的不是很好。面试官感觉还是很不错的，然后给我说你以后要多看看例如 handler 原理，windowManager 的东西，并且从源码上去分析，网络上的理论知识还是要结合实践的，真是受教了。这部分我有点弱，虽然知道原理，但是看过源码的东西还是很少的，以后需要注重补充。他说他才是高级，我要应聘的这个 架构师肯定是不行的，问我是否愿意做其他的，我当然表示愿意了，现在要综合提升能力，才能往更高层走。&lt;/p&gt;
&lt;p&gt;最后的最后，他很搞笑的跟我说：『我这人真不骗人』。我还纳闷啥意思，最后他说：『今天已经很晚了，第二轮的面试官不在，我明天给你向上反馈下（从之后的一个同事的口中才明白，一般说第二轮的面试官不在，基本就是说你没戏，很委婉的一种说法而已）』。&lt;/p&gt;
&lt;p&gt;结束后我看了一下表，我晕，一面就面试我了一个半小时，真特么无语了。不过收获还是很大的，知道自己的不足后，就知道需要补充哪些东西了。&lt;/p&gt;
&lt;h5 id=&quot;乐视&quot;&gt;&lt;a href=&quot;#乐视&quot; class=&quot;headerlink&quot; title=&quot;乐视&quot;&gt;&lt;/a&gt;乐视&lt;/h5&gt;&lt;p&gt;去了一趟姚家园的乐视，只能说看着挺风光的，但是进去后，特么的真虐人。&lt;/p&gt;
&lt;p&gt;电梯分区，还只能在一边的乘坐，很不赶巧的是我去的时间刚好是10点，对于他们公司来说这就是高峰期，电梯根本排不上队，而且乱糟糟的（之前在X游的时候，大家都是排队的，这边没有，可能地方太小了，排不开吧）。电梯上不去了，看来只能跟一些人爬楼梯，一直爬到9层，感觉都喘不过气了。&lt;/p&gt;
&lt;p&gt;上去后一个很美的 HR（长腿姐）带我找面试官，然后表示没有会议室，原来的会议室都变成工位了，所以让我先在一个小角落呆着（保洁阿姨的专属位置），过了好一会面试官姗姗来迟，也是一些非常基础性的东西，最主要的是他们提到了推送，怎么实现，已经存活情况说了一些。&lt;/p&gt;
&lt;p&gt;第二个面试官也是特么来得晚，等了 N 久，闲的无聊就和保洁阿姨聊天，顺带看看他们的办公环境，只能说真心挤得慌。第二位面试官来了后就看看我的经历，因为第一轮的技术面都过了，因此简单聊了下，就说说他们的发展前景，要做海外产品。听我的兴致勃勃，很开心，然后让我等会。&lt;/p&gt;
&lt;p&gt;他们基本都去吃饭了，留下了我在那里干等，然后来了一个HR 的小妹妹，跟我谈薪资以及经历，貌似对我一两年换工作有很大意见，哥就好好给她普及了一番互联网界的基础知识。没想到就在快要搞定的时候，这个小妹妹的老大过来了，然后就看见一个身材超棒，腿很长的漂亮姐姐 HR（长腿姐），坐在我的对面（小妹妹示意我这是她的老大）。瞬间不爽了，都马上谈完了，结果换人再来，真无语了。只能将刚刚的辉煌时刻再来装 B一次，然后谈薪资神马的，给的也不是很多，我要 20K+，她说那么多，只能给我薪资范围最低的一个档次。好吧，就接着吧，然后非要我先填写一份背景调查表，如果没有问题后，才给我发 offer，我看到美女拿着那份很大的 纸张，瞬间无语了。&lt;/p&gt;
&lt;p&gt;我当时就不怎么开心，然后长腿姐毕竟老练的很问到：『说你是不是有事？』。我说是的，待会1点还有其他地方的面试，然后她说：『那你先回去吧，这个表格发你邮箱，你写好后发给我。』然后长腿姐就送我出去，我又特么的一路爬楼梯下去（9层啊），电梯等了 N 久都下不去。&lt;/p&gt;
&lt;h3 id=&quot;接下来说说几个有意思的公司&quot;&gt;&lt;a href=&quot;#接下来说说几个有意思的公司&quot; class=&quot;headerlink&quot; title=&quot;接下来说说几个有意思的公司&quot;&gt;&lt;/a&gt;接下来说说几个有意思的公司&lt;/h3&gt;&lt;h5 id=&quot;新浪&quot;&gt;&lt;a href=&quot;#新浪&quot; class=&quot;headerlink&quot; title=&quot;新浪&quot;&gt;&lt;/a&gt;新浪&lt;/h5&gt;&lt;p&gt;新浪位于理想国际大厦，记得几年前去新浪面试的时候，傻傻的都没准备就去了，结果第一关就挂了。&lt;/p&gt;
&lt;p&gt;这次是下午去，外面还飘着毛毛细雨。去了后竟然特么的让我做面试题，哥已经不做面试题很多年。但是想起了之前的经历，还是老老实实写写，据我估计面试的哥们应该会问上面的东西。还好这次做了万全的准备，刷了 N 多面试题，补充了基础的数据结构理论知识。写起来如行云流水，嗖嗖嗖的没几分钟就完了。&lt;/p&gt;
&lt;p&gt;第一个面试的哥们看看卷子，没啥意见，然后问最后一道纠错编程题有没有什么问题，我虽然指出了几个错误，但是感觉他还不是特别满意。因此我仔细看了下，原来是一个静态变量引用了 Activity 的上下文,然后指出，他再问了一些偏底层的东西以及性能优化的地方，轻轻松松就过了。&lt;/p&gt;
&lt;p&gt;等到第二面的时候，这个人一看就是技术大牛，问了很多 Java 层面的东西，多态，抽象类，多线程，内存管理等等。我感觉回答的不是太好，多态那有点问题，其他的应该还可以。&lt;/p&gt;
&lt;p&gt;然后就进入了第三面，第三面的面试官应该是部门负责人，问了工作经历上的事情以及兴趣爱好，之后的发展方向，想做什么层面的。最后很不幸的是在等待第四面的时候，最开始给我题的美眉告诉我时间很晚了，让我先回去，之后等消息。&lt;/p&gt;
&lt;p&gt;至少这次来比第一次高级了很多，不至于第一轮就被刷下去。最后分析了下原因，还是薪资要的太高了，尤其是这类公司。&lt;/p&gt;
&lt;h5 id=&quot;滴滴&quot;&gt;&lt;a href=&quot;#滴滴&quot; class=&quot;headerlink&quot; title=&quot;滴滴&quot;&gt;&lt;/a&gt;滴滴&lt;/h5&gt;&lt;p&gt;滴滴位于西二旗，应该有两个办公地点，其实我一直很想去滴滴，福利待遇很不错。一年前去过一次，很可惜在第一轮的时候，因为在某些适配方面回答的不是太好，因此失去了机会。&lt;/p&gt;
&lt;p&gt;这次已经准备很多了，进来后还是在去年的位置上坐下等面试官。说实话感觉滴滴成长的很快，办公环境都变的更漂亮了，哈哈哈。&lt;/p&gt;
&lt;p&gt;这个面试官一看就是一个技术宅，开始对我各种炮轰。面试题一个接一个的，在我连续回答十来个题后，看见他还在问，记得在提及到 volatile 的作用的时候，我就开始不爽了，这个东西记得之前在源码里面见过，但是具体的一时说不上来，看着他那样子，埋头在纸上给我出题，我就不怎么配合了。面试了那么多家，就你问了 N 多问题，还有完没完了（其实这也算是抗压的一种面试方式）？我直接说不知道，然后他再问了几个基础性的东西，我想都不想直接说不知道，他貌似已经看出来我已经很不爽了，然后说，那你说说你项目中有没有比较 NB 或者比较有亮点的地方。我的回答直接是：没有。然后他也就不怎么问了，说那先这样。我说：好，就这样，我先走了。 然后潇洒的离开滴滴。&lt;/p&gt;
&lt;p&gt;现在想想真特么的很2B，应该低调低调再低调。也可能是那天下午太累了，上午面试了两家，而且已经拿到两家的 offer 了，还都不错，在这特么憋屈，才表现的如此差劲。其实对于问题，知道的话就好好说，不知道的话，可以说说思路和想法，然后说说以后会怎么做，利用迂回包抄策略去应答，准没错。至少给面试官知道你还是可以动脑子的人。&lt;/p&gt;
&lt;p&gt;在此我真心后悔当时的冲动，向滴滴那位面试官表示歉意。其实不用那样的，我们只需在面试的时候尽力表现自我就可以，以后切莫带着情绪去看待或者回答问题。&lt;/p&gt;
&lt;p&gt;对于人生中的很多问题也是这样的，这次栽倒坑里去了（用我老大的话来说，你不在这里踩坑，总有一天也会在另外一个地方踩到，到时候的损失就不可估计，趁着年轻多多历练自己），总结之后才能更近一步。&lt;/p&gt;
&lt;h5 id=&quot;百度外卖&quot;&gt;&lt;a href=&quot;#百度外卖&quot; class=&quot;headerlink&quot; title=&quot;百度外卖&quot;&gt;&lt;/a&gt;百度外卖&lt;/h5&gt;&lt;p&gt;百度外卖现在已经不属于百度了，而是单独分出来。&lt;/p&gt;
&lt;p&gt;我的一个同事去了百度外卖，我感觉他的能力和我差不多，我就让他推荐了。&lt;/p&gt;
&lt;p&gt;去后，上了一个很长的台阶（感觉很庄重的样子），要刷卡才能进去。等了好长时间，面试官把我领到楼下的公共办公桌，就是那种中间空地，周围都是楼层，能看见其他人在楼层间走动。一个年龄见长的面试官，开始感觉挺随和的，然后说跟我聊聊 Android 基础。&lt;/p&gt;
&lt;p&gt;第一个问就是：『咱们先来谈谈 Android 的四大组件。』我彻底懵逼了，尼玛，跟我谈四大组件，有意思么? 没想到一直到最后都跟我谈这些，一个接一个的问。说到广播那块，关于一个 app 被杀掉进程后，是否还能收到广播的问题纠结了好久。&lt;/p&gt;
&lt;p&gt;然后让我画我之前设计的架构图，我就随便画了画，但是没想到这个看起来很好的面试官让我大跌眼镜，他用鄙夷的笑容告诉我：『你这也太初级了。』我当时心里有几万只草泥马在崩腾，你都30+了，就不知道鼓励新人啊，我都说过我刚做架构的时间不长，而且鄙视我，有本事你也弄一个架构给我看看啊，一点不尊重我们年轻一辈的劳动成果。也许就怪我当时我真就按照他说的草草画几笔吧，没怎么认真对待。我去其他公司面试的时候，虽然这个图不怎么样，但是至少能解决 某些领域的问题，其他面试官都很谦虚。这个百度外卖的面试官，真不是我喜欢的领导，如果以后真让他来带我，那就真完蛋了，很多时候我们都是因为某些人扼杀了我们最初美好的萌芽，而从此失去了创新的意识。&lt;/p&gt;
&lt;p&gt;很庆幸的是我在 K 公司的时候，老大一直鼓励我创新，遇到想做的就去做，所以一路下来，虽然很累，但是干的很开心。&lt;/p&gt;
&lt;p&gt;所以每当有人问当初为什么选择K 公司的时候，我都会自豪的说：『我的老大很不错，我在那里很很舒服，很开心』。记得在我离开的时候老大给我最后劝告就是：『你要时刻反思自己此刻是不是已经被别人洗脑了。』&lt;/p&gt;
&lt;h3 id=&quot;第三轮：&quot;&gt;&lt;a href=&quot;#第三轮：&quot; class=&quot;headerlink&quot; title=&quot;第三轮：&quot;&gt;&lt;/a&gt;第三轮：&lt;/h3&gt;&lt;h5 id=&quot;1-百度&quot;&gt;&lt;a href=&quot;#1-百度&quot; class=&quot;headerlink&quot; title=&quot;1.百度&quot;&gt;&lt;/a&gt;1.百度&lt;/h5&gt;&lt;p&gt;百度位于海淀区上地十街附近，有很多大厦。 我去的是一个做国外工具的部门，去了后，被百度的环境和氛围震惊到了，在一个很大的技术园区，有网易，百度，腾讯公司，对面还有一个大楼正在修建，估计会是另外一个互联网公司的场地。&lt;/p&gt;
&lt;p&gt;进入大厦里面后，由于还没来得及吃饭，边吃手里的饼，边浏览下百度的外围办公区。进入百度的大楼后，两个入口都设有刷卡机。&lt;/p&gt;
&lt;p&gt;在空闲区等了好一会，然后一个人带我进入大厦。在进去之前，到前台那块面试官输入自己的邮箱账号，然后让我填写其他登记信息，我印象最深的是显示器上边贴着一个纸条，说：请离开的时候在此登记，否则会进入百度的黑名单（意思就这样，具体记不清了）。当时震惊了半天，没想到竟然这个严格。&lt;/p&gt;
&lt;p&gt;和面试官进入大楼里面后，只记得的印象是：很整洁，高大。出楼梯后，脚踩着厚厚的地毯，稍微走快点，都感觉很松弛，脚下如踩棉花一样。&lt;/p&gt;
&lt;p&gt;为什么有地毯，而不是地板砖————到了夏天很多漂亮的长腿美女穿着高跟鞋踩在地板砖上是一个怎么样的体验呢？噔噔噔…… &lt;/p&gt;
&lt;p&gt;我在等候区等到第一个面试官，然后我们简单聊了下 Android技术，其中有两点有必要提下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其中一点是：说说 View 的事件分发机制。然后我就说了好多，从 WindowManager-&gt;window-&gt;Decorview-&gt;子 view。最后我说当所有的 view 都不处理事件，事件会最后会传递到 Activity 的 onTouchEvent 上。然后面试官立刻说：『哈？你这是颠覆我的三观啊？』 然后我意识到可能有问题，但是记得 《Android 艺术开发探索》上确实写过到 Activity，但是不是到 onTouchEvent还真没底。面试官很自信的样子，让我颤抖了。但是随着我的坚信，面试官说：『不行，我不能冤枉你是不！』立刻在手边的 MBP 上看了一下，自言自语感叹道：『还真有啊！』 我顿时无语了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另外一点是：问我 Service 上能不能弹出对话框。对于这个问题，我印象最深刻了，记得一年前的时候，在另外一个公司就因为这个问题让我尴尬万分，回去后专门对这块进行补充。我的回答是可以的，但是面试官面带差异的表情告诉我这是不行的，Dialog 必须要依附于 Window 才能显示出来。然后我的解释会让面试官郁闷一会：我说这个是可以弹出的，我之前也专门试过，不过他弹出是有条件的。 条件是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须在 Manifest 里面注册系统权限&lt;/li&gt;
&lt;li&gt;在显示 dialog 的时候必须要加一个 flag.&lt;br&gt;我的理由是：系统对话框可以在低电量的时候弹出对话框，我们同样也可以采用该方式来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面试官语塞，然后给我说 Dialog 是必须要依附在 Window 上，Toast 其实也是一个 Window。我听着这些话，就想起以前看过的一篇文章上也确实是这么说的。估计该面试官回去要好好补充下一些知识了哦。 然后该面试官让我不能用 Arraylist,用数组 写一个队列。这块刚好我在之前项目中特意用了一下，写的时候，主要有三个方法： put(), get(),peek(). 然后考虑下队列的特性，一端进入，一端出去。我当时遇到了盲点，没怎么写完，最后给面试官说了下思路，大体是对的。但是关于选择位置那块没怎么想好。不过这不阻碍我进入第二轮。&lt;/p&gt;
&lt;p&gt;第二轮面试的时候，面试官带了很多纸张，我瞬间压力山大，知道不太妙。不出所料，这个面试官，从动画实现原理，到 handler 实现原理，一步步深入各种原理，当我感觉回答的不错的时候，然后他就顺着我的问题继续深入。我只能说我尽力了，有些东西，平时开发的时候真心不注意，但是就因为没有留意，所以就没法继续回答他的问题。&lt;/p&gt;
&lt;p&gt;面试官把我带出大厦的那一刻，我心情很不好，很可惜没进入百度，之后应该需要准备很多东西。我要说，我还会再来的，哈哈哈！ 最后也归还身上的一个牌子到前台后，省的被拉入到黑名单（好吓人的样子）。&lt;/p&gt;
&lt;p&gt;以后有时间多看看原理性的东西，最好整理一个自己的博客，写上自己的一些看法和感悟，这样记得最深刻，即使几年后也不会遗忘，只是看看别人总结的东西，真的就不怎么记得住。&lt;/p&gt;
&lt;p&gt;关于博客可以使用 Hexo, 我的博客也是如此，可以整理一些自己的东西与心得。&lt;/p&gt;
&lt;h3 id=&quot;2-阿里&quot;&gt;&lt;a href=&quot;#2-阿里&quot; class=&quot;headerlink&quot; title=&quot;2.阿里&quot;&gt;&lt;/a&gt;2.阿里&lt;/h3&gt;&lt;p&gt;这次去的是一个阿里的高德部门，在望京 Soho 附近的 首开广场。去了以后首先找厕所，你们知道么？厕所竟然从大厦楼层的的一个角转了一大半圈才找到，回来后进入找不到前台了…… 瞬间无语了。问了好一个美女才回到前台，然后接待我的 HR美女貌似等得不太耐烦了（宝宝心里苦，厕所好远，都找不到回来的路了）。在一个小型会议室等待面试官，看了下布置氛围和环境，感觉太棒了，很多东西都体贴入微。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;回顾上次阿里的悲痛遭遇&lt;br&gt;&lt;br&gt;&lt;br&gt;其实这是我第二次来这边面试了，上一次过来的时候，是刚过完年。提到这里我就苦不堪言，为何如此说呢？当时是2016年2月15日，因为我参加好朋友的婚礼（不得不说，我这个年纪的人都开始结婚了，这次回去有4个好朋友都结婚，可想而知，一场完了以后还有另一场，虽然累，但是值得）推迟了好几天才回北京，在参加同学婚礼的时候接收到阿里高德部门的面试邀请。回到北京的当天是12点多，然后回家，一个关系非常好的朋友说今天她们要宴请公司的人吃饭，因为她们结婚了，让我帮忙弄个 MTV。我想这是朋友的终身大事，因此必须要好好干。&lt;br&gt;&lt;br&gt;&lt;br&gt;我下午4点是阿里高德的面试，因此时间很紧促。我凭借我大学的技能在两个小时内搞定这个 MTV，总体来说还不错，就迅速发给朋友，弄完已经3点了，然后打车立刻去首开广场。&lt;br&gt;&lt;br&gt;&lt;br&gt;高德的面试是4点钟，匆匆赶到后，就等待面试官。面试很不理想，因为什么都没有准备，而且心力憔悴。面试官问的是一些基础的 Java 问题，很可惜我没怎么回答好。于是就深深的浪费了一次机会，之后和朋友提起此事，无比后悔，当时其实是可以和 HR 电话再约一个时间的。&lt;br&gt;&lt;br&gt;&lt;br&gt;这次对我的打击很大很大，因为这是我这么多年第一次面试 BAT 的职位，一上来就受挫，很不是滋味。&lt;strong&gt;我在这里失利后我就各种准备资料，增强自己的能力，面试前必须要刷题，虽然简单，但是不失为一种方法，虽然不一定有用，但是会加深印象，尤其是去 BAT 这些公司，一定要准备好，否则就别浪费机会，这就是我的教训和经验。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;为了6月份的这次面试策划了很久。以前对什么可能都不是很上心，但是这个事件深深的刺激我了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一个面试官来了后问了一些基本问题，很顺利就进入到第二轮面试。&lt;/p&gt;
&lt;p&gt;第二轮也基本是技术面试，问了一些 Android 基础和 Java 基础以及内存管理。&lt;/p&gt;
&lt;p&gt;第三轮的面试官应是部门负责人，看起来很好说话的，问了一些经历和基本情况后，问我薪资要多少以及之后的发展方向。我说要 20K+，之后希望在架构方面发展，但是也可以从业务开始。貌似这里回答的不怎么好。然后让我留了他的联系方式，我知道很有戏哦。&lt;/p&gt;
&lt;p&gt;因为我在进入 K 公司的时候也是这样的，老大感觉我很不错，于是留了微信后，我基本就顺利入职。&lt;/p&gt;
&lt;p&gt;回去后的一两天还是很焦虑的，但是我知道大公司都是有流程的，因此我告诉自己不要焦急。过了一两天后他主动加我微信，然后问了些基本情况后，就说他要做最后的总结，让我等着，最迟一周后就有消息。我感觉希望超大的，开心了好久，本以为就可以这样过去。但是一周时间过去了，没人通知我，我开始焦急了，于是我开始主动和他说话，反思自己是否有什么地方做的不好。&lt;/p&gt;
&lt;p&gt;经过很多面试后我总结出了结论就是要薪资太高了，于是我在微信里面给他说，只要能过去，薪资低点也是可以的。但是问了他好几次，他都没有回话，看着微信消息记录，都是我发给他，而他没有回复，已经过去好多天了，我知道没希望了，他说不管怎么样都会给我回复的，但是我真绝望了。&lt;/p&gt;
&lt;p&gt;就像相亲一样，遇到一个不错的美女，开始都一起聊得很不错，她开始加你好友，并且和你说看好你，不管能不能做女朋友，她之后一定会回复，但是苦苦等待一段时间后，不管你怎么给她说话，但是她就是不理你。可能她真的忙，但是也不可能连续一两天都这么忙吧。于是你知道没结果，因为无言等同于没有希望。为了避免一些幻想的存在，你会将她删除掉，不想留下任何关于他的信息。&lt;/p&gt;
&lt;p&gt;同样我也是把这个阿里高德的老大的联系方式删掉，微信也删掉。在我失去希望的时候，过了几天看见他要主动加我，但是我想可能只是安慰的话语，最多告诉我，我不适合他们的职位，因此我为了避免尴尬，直接删除那个加我好友的请求（如果说真的合适的话，应该会很重视你的，不可能好几天都回复，怎么有一种备胎的感觉，呜呜呜，我不想被发好人卡，宁愿做高傲的兔子，也不想做纸老虎，虽然尽管只是纸老虎，但是也会拥有属于它的一片森林）。&lt;/p&gt;
&lt;p&gt;于是阿里的这次机会就失去了。&lt;/p&gt;
&lt;p&gt;总结后的结论就是：去大公司要的薪资不要太高，否则对方只能感谢你的到来，因为比你优秀的人太多了。&lt;/p&gt;
&lt;h3 id=&quot;聚美优品&quot;&gt;&lt;a href=&quot;#聚美优品&quot; class=&quot;headerlink&quot; title=&quot;聚美优品&quot;&gt;&lt;/a&gt;聚美优品&lt;/h3&gt;&lt;p&gt;聚美优品 位于东四十条地铁站附近。路过一个竹亭子后，进入大厦里面需要用身份证在前台那块登记后给我一个纸条，上面写着我的身份证信息，然后在门禁卡附近刷二维码进入（真担心个人信息泄露哦，当然一般情况下没人会关注你是谁的，千万别干坏事哦，会被查出来的，哈哈哈）。&lt;/p&gt;
&lt;p&gt;推荐我去聚美优品的同事接我上去后，带我到前台填写基本信息。我只写了最基本的信息，然后她说，你就写这么点啊。我说，其实这些信息够用了，写那么多没用，还会暴露你的个人信息。面试成功后，如果有需要可以写详细些，但是一般去面试最好别写身份证信息。工作经历基本也只是最近两个，之前的就不用写了，写那么多没什么用，简历中都会有的。&lt;/p&gt;
&lt;p&gt;记得刚工作那会，傻傻的全写了，真耽误了不少时间。过了一会，她把我交给 漂亮的HR 温柔姐，然后就先忙去了。温柔姐告诉我一般情况下有两轮基本就过了，先让架构师老大直接面我，让我先等候。&lt;/p&gt;
&lt;p&gt;过了一会温柔姐不好意思的跟我说架构老大先让一个技术面我，问我是否有意见，我当然没意见了，这是很标准的面试流程（如果你有意见，建议还是别说太多的话，基本都这样的，要淡定）。&lt;/p&gt;
&lt;p&gt;一面技术给我一种很成熟的感觉，开始问了我一些基础技术问题，外加 Java 内存管理知识。后给我出了一道算法题，说有一个数组最多存储6个数，如果有普通用户的话，存储四个 vip的客户，另外两个是普通用户（留出一定的空间给普通用户），让考虑全面点（一般都是结合实际场景，让你写出一个算法，要具备的能力就是抽象，处理问题的思路与细节，还有最基本的编码功底）。&lt;/p&gt;
&lt;p&gt;然后我就考虑各种情况，第一种是非空情况，然后下面就是几个大的 if else, 至少四个条件，基本涵盖了全部情况，然后每个条件里面写上对应的存储数据的过程。由于我的四个大条件都把距离占的差不多了，在写里面细节的时候，用中文描述。过了一会他回来后，看了下说：『你这个还有中文啊！』 我尴尬的笑着说：『我先写条件的，最后发现没有空位了，只能用文字代替了，你看我正在另外一个纸上写全部的完整算法。』指了指纸上刚写一小半的代码。他也会心一笑，并指出算法上应该改进的地方，基本 ok 啦。&lt;/p&gt;
&lt;p&gt;然后等第二轮的面试，看起来更成熟，但是说话有一种很亲近的感觉。问了基本情况，然后拿出他们的 app 让我看看首页的实现效果，说说怎么实现的。对于这种情况，基本就是考察你的抽象能力，以及分析问题的能力。我先说出使用 ListView 的 header，footview,然后使用 ListView 的 type 来实现。然后简单说了一些性能优化的东西，该面试官提出我的做法可能会存在性能瓶颈。其实他说出这块是在指导我说这块会有问题，我当然明白他的意思，于是说这块采用 recyclerview + fresco 来实现，可以有效的改善问题（其实提到这些，就说明你看过很多新技术了，有时间最好还是要自己练练这些东西，毕竟孰能生巧）。&lt;/p&gt;
&lt;p&gt;他也没深究，基本就感觉不错，开始谈了谈他们的目前状况，以及即将遇到的问题。他在只言片语中都把我当做内部人看，我也心里感觉很舒服。最后告诉我如果我愿意，他就向上报备了，意思是可以继续下一轮。当时他问到我的薪资的时候，因为之前已经说了 N 多次，有的成功，有的感觉很亏，于是这次我并没有说，只是笑笑，而对方说：『那就按照年薪算吧，你打算要多少呢？』我当时什么也没有多想，然后就说：『我希望在我现有的薪资基础上，能上涨15% - 20%。』他经过在手机上一阵比划后，告诉我可以达到我的预期效果。整个过程感觉很愉悦。&lt;/p&gt;
&lt;p&gt;因为面过很多，虽然已经有 offer 了，但是还是想多看看，最后把自己搞的很疲惫不堪。开始都心灰意冷了，但是最后的最后，还真很幸运，周一电话通知面试通过，温柔姐说那个老大直接把我内定了，不用再复试。&lt;/p&gt;
&lt;h3 id=&quot;最终结果&quot;&gt;&lt;a href=&quot;#最终结果&quot; class=&quot;headerlink&quot; title=&quot;最终结果&quot;&gt;&lt;/a&gt;最终结果&lt;/h3&gt;&lt;p&gt;最终我辞职后在家休息几天，没事的时候去咖啡馆看看书，上上网，好好过几天轻松的日子，然后再说定去哪里工作。&lt;/p&gt;
&lt;h3 id=&quot;总结：面试和必备的技能&quot;&gt;&lt;a href=&quot;#总结：面试和必备的技能&quot; class=&quot;headerlink&quot; title=&quot;总结：面试和必备的技能&quot;&gt;&lt;/a&gt;总结：面试和必备的技能&lt;/h3&gt;&lt;p&gt;这里只简单列举一些东西，可能不是特别全，但是却特别适用，也不一定按照下面的流程，有可能是穿插的，也有可能都有，根据公司的规模以及面试官的心情而定（哈哈哈 ，你们就自求多福吧）。建议大家还是要将下面的东西全部掌握，没事写写代码，练练手，在项目中能用到的地方一定要用，有可能会遇到很多坑，一定要自己想办法填坑，之后回忆起这段经历，肯定可以敢理直气壮的跟别人讨论。如果你说的头头是道，那么对方会先输一层，然后在心里对你佩服。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一般情况下第一轮都是基础面试，需要扎实的基础&lt;ul&gt;
&lt;li&gt;最常用的Android 基础知识&lt;/li&gt;
&lt;li&gt;Java 基础知识&lt;/li&gt;
&lt;li&gt;了解一些 常用东西的原理，例如：handler， thread 等&lt;/li&gt;
&lt;li&gt;项目中的技术点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二轮的时候需要了解更深层次的东西&lt;ul&gt;
&lt;li&gt;Android 事件分发机制原理&lt;/li&gt;
&lt;li&gt;Android 绘图机制原理&lt;/li&gt;
&lt;li&gt;WindowManager 的相关知识&lt;/li&gt;
&lt;li&gt;进程间传输方式&lt;/li&gt;
&lt;li&gt;Java 内存管理机制&lt;/li&gt;
&lt;li&gt;一些常用的 list,map 原理，以及子类之间的差别&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;能进入第三轮基本没什么问题，但是要注意以下问题&lt;ul&gt;
&lt;li&gt;该轮一般是 老大或者部门负责人，问的问题一般都看 深度与广度&lt;/li&gt;
&lt;li&gt;当问及薪水的时候，要说一个合适的，小公司随意，大公司一定要慎重，当心里没底的时候，可以告诉对方，让对方给一个合理的薪资。一般都是在原工资基础之上增长，听猎头说一般涨幅都在15%-30%，超 NB 的可以要30%及以上，如果感觉自己还不错的，挺厉害的，建议最高20%，一般人就定在15% 左右最靠谱。公司内部一般有一套机制，根据公司情况而定。&lt;/li&gt;
&lt;li&gt;我们的面试原则就是拿到合理薪资，得到 offer&lt;/li&gt;
&lt;li&gt;个人发展情况，这个问题很难回答，如果和公司方向不符合，极有可能和公司无缘。建议多试探性的问问公司缺少什么，你能否给予公司对应的东西。当然对于有自我追求的人，那可以放心大胆的提。我的方向就是架构师，哈哈哈，挺极端的，别学我哦。我感觉选择都是双向的，因此我知道自己需要的是什么。&lt;/li&gt;
&lt;li&gt;你最擅长什么UI 还是其他什么？这个问题更不好回答。你要说你擅长 UI，是不是意味着你其他能力就不行？虽然我不知道面试官的用意，但是我能感觉到，这个问题不是那么好回答，我会回答说自己都行，来什么业务接什么需求。可能回答不太好，总之和公司的职位吻合就行，这样总不至于出错吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你有面试的疑问或者困惑，可以加我的微信公众账号:&lt;a href=&quot;http://7xlcno.com1.z0.glb.clouddn.com/weixingdky005_mianshishuo.jpg&quot; title=&quot;面试说&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mianshishuo&lt;/a&gt;, 可以扫描下方二维码，一起来吐槽面试中的感受。我将不定期分享最新的 Android 面试题与面试经验。也可以将你们的面试经验与问题发给我一同讨论，非常感谢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/weixingdky005_mianshishuo.jpg&quot; alt=&quot;&quot; title=&quot;微信公众账号：面试说&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;花絮&quot;&gt;&lt;a href=&quot;#花絮&quot; class=&quot;headerlink&quot; title=&quot;花絮&quot;&gt;&lt;/a&gt;花絮&lt;/h3&gt;&lt;p&gt;本文为完整版，加了一些彩蛋哦！文末有面试和必备的技能点总结。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也许会有人感叹某些人的运气比较好，但是
    
    </summary>
    
      <category term="面试说" scheme="http://gdky005.com/categories/%E9%9D%A2%E8%AF%95%E8%AF%B4/"/>
    
    
      <category term="面试心经" scheme="http://gdky005.com/tags/%E9%9D%A2%E8%AF%95%E5%BF%83%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用 Android Studio 内存分析工具</title>
    <link href="http://gdky005.com/2016/06/20/%E4%BD%BF%E7%94%A8-Android-Studio-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://gdky005.com/2016/06/20/使用-Android-Studio-内存分析工具/</id>
    <published>2016-06-20T10:33:33.000Z</published>
    <updated>2016-06-20T10:36:13.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;App的内存使用可以通过以下三个工具分析：&quot;&gt;&lt;a href=&quot;#App的内存使用可以通过以下三个工具分析：&quot; class=&quot;headerlink&quot; title=&quot;App的内存使用可以通过以下三个工具分析：&quot;&gt;&lt;/a&gt;App的内存使用可以通过以下三个工具分析：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Heap Viewer&lt;/li&gt;
&lt;li&gt;Memory Monitor&lt;/li&gt;
&lt;li&gt;Allocation Tracker&lt;br&gt;并且，这个三个是互补的可视化内存分析工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;使用 Memory Monitor 可以查找非正常的 GC 导致的性能问题。&lt;/li&gt;
&lt;li&gt;运行 Heap Viewer可以确认出 object 类型是不是 不必要的，或者分配的内存超出我们的预期估计，可能是持续增长，我们预期是在不需要的时候，可以回收内存。&lt;/li&gt;
&lt;li&gt;使用 Allocation Tracker 可以确定出你的代码中存在的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Memory-Monitor&quot;&gt;&lt;a href=&quot;#Memory-Monitor&quot; class=&quot;headerlink&quot; title=&quot;Memory Monitor&quot;&gt;&lt;/a&gt;Memory Monitor&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/AS_memory_01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示你的 App 当前某一时刻的内存状态（包括可用内存，和占用内存）的曲线图，用电压跌落 的方式展示 Garbage Collection (GC) 的现象。&lt;/li&gt;
&lt;li&gt;可以方便的看出 app 的卡顿是否是由于频繁 GC（内存 频繁回收，一个 app 在手机上分配的内存是一定的，但手机厂商决定手机内存的大小，因此当我们的 app 的内存达到一定的峰值的时候，系统就会回收内存，保证 App的正常运行） 导致。&lt;/li&gt;
&lt;li&gt;提供一种快速看出App 是否是由于 运行内存不足 而导致的 crash(崩溃)的方法。&lt;/li&gt;
&lt;li&gt;当前运行的app ，每一秒更新占用内存的状况。&lt;/li&gt;
&lt;li&gt;有助于识别潜在的内存泄漏。&lt;/li&gt;
&lt;li&gt;有助于识别 App 的 GC模式,并确定它们是否正常和你所希望的样子。&lt;/li&gt;
&lt;li&gt;它很容易使用，并且很容易看明白&lt;/li&gt;
&lt;li&gt;然而，Memory Monitor 不能告诉你哪些对象是有问题的，或者给你指出代码中存在的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Heap-Viewer&quot;&gt;&lt;a href=&quot;#Heap-Viewer&quot; class=&quot;headerlink&quot; title=&quot;Heap Viewer&quot;&gt;&lt;/a&gt;Heap Viewer&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/AS_memory_02.png&quot; alt=&quot;Allocation Tracker&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据类型 分配许多对象 的快照图。&lt;/li&gt;
&lt;li&gt;每一次的样本数据 是自动采集或者你手动触发。&lt;/li&gt;
&lt;li&gt;帮助确定哪些对象类型可能是内存泄漏。&lt;/li&gt;
&lt;li&gt;然而，你 &lt;strong&gt;必须自己寻找&lt;/strong&gt; 在一段时间内曲线图的变化发送了什么。 （重点，需要&lt;strong&gt;采集两次以上&lt;/strong&gt;的数据进行&lt;strong&gt;对比&lt;/strong&gt;，才能明确，出问题的地方在哪里）&lt;h3 id=&quot;Allocation-Tracker&quot;&gt;&lt;a href=&quot;#Allocation-Tracker&quot; class=&quot;headerlink&quot; title=&quot;Allocation Tracker&quot;&gt;&lt;/a&gt;Allocation Tracker&lt;/h3&gt;&lt;a href=&quot;#&quot; title=&quot;Allocation Tracker&quot;&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/AS_memory_03.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;显示你的代码在在一定的时间内分配的 object 类型，Object 的大小，分配的线程和堆栈的大小&lt;/li&gt;
&lt;li&gt;帮助识别 内存的改变是通过 循环分配或重新分配。&lt;/li&gt;
&lt;li&gt;可以结合使用 Heap Viewer 来跟踪内存泄露，例如，如果你看到了一个 bitmap 对象 在 heap 上分配的大小。你可以使用 Allocation Tracker 找到它分配的位置。&lt;/li&gt;
&lt;li&gt;然而，它需要时间和经验来学习理解这个工具的使用。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;App的内存使用可以通过以下三个工具分析：&quot;&gt;&lt;a href=&quot;#App的内存使用可以通过以下三个工具分析：&quot; class=&quot;headerlink&quot; title=&quot;App的内存使用可以通过以下三个工具分析：&quot;&gt;&lt;/a&gt;App的内存使用可以通过以下三个工具分析：&lt;/
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://gdky005.com/categories/AndroidStudio/"/>
    
    
      <category term="AndroidStudio" scheme="http://gdky005.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>网络请求的 UA</title>
    <link href="http://gdky005.com/2016/06/20/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84-UA/"/>
    <id>http://gdky005.com/2016/06/20/网络请求的-UA/</id>
    <published>2016-06-20T10:27:54.000Z</published>
    <updated>2016-06-20T10:29:18.000Z</updated>
    
    <content type="html">&lt;p&gt;一般我们的客户端请求头里面都会有一个 User Agent 的参数，默认请求下 会直接获取系统里面的一些参数信息，然后发送到服务器。服务器就知道这个设备 大体情况，也可以根据这个来处理，或者禁用某些设备。&lt;br&gt;一般定义的 UA 应该包含下面这些东西（当前也可以删减或去掉的）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;appName + versionName + versonCode + 渠道号 + 设备基本信息&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里写一些大体的代码，其他可以自行封装：&lt;/p&gt;
&lt;p&gt;拼接数据：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;appName: mContext.getString(R.string.appname)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;versionName:  DeviceUtil.getVersionName(mContext)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;versonCode: DeviceUtil.getVersionCode(mContext)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;渠道号：DeviceUtil.getChannelTag(mContext)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设备基本信息:&lt;br&gt;&lt;code&gt;build.MODEL         Nexus 6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build.MANUFACTURER  motorola&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build.BRAND            google&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build.FINGERPRINT    google/shamu/shamu:6.0.1/MMB29S/2489379:user/release-keys&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Build.VERSION.RELEASE 6.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Build.VERSION.SDKINT 23&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一般我们的客户端请求头里面都会有一个 User Agent 的参数，默认请求下 会直接获取系统里面的一些参数信息，然后发送到服务器。服务器就知道这个设备 大体情况，也可以根据这个来处理，或者禁用某些设备。&lt;br&gt;一般定义的 UA 应该包含下面这些东西（当前也可以删减或去掉的
    
    </summary>
    
      <category term="okhttp3" scheme="http://gdky005.com/categories/okhttp3/"/>
    
    
      <category term="okhttp3" scheme="http://gdky005.com/tags/okhttp3/"/>
    
  </entry>
  
  <entry>
    <title>从 volley 切换到 OkHttp 遇到的坑</title>
    <link href="http://gdky005.com/2016/06/20/%E4%BB%8E-volley-%E5%88%87%E6%8D%A2%E5%88%B0-OkHttp-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://gdky005.com/2016/06/20/从-volley-切换到-OkHttp-遇到的坑/</id>
    <published>2016-06-20T10:17:30.000Z</published>
    <updated>2016-06-24T07:55:09.000Z</updated>
    
    <content type="html">&lt;p&gt;这几天打算把项目的 volley 切换到 okhttp,遇到了一些小问题，现在予以整理。&lt;/p&gt;
&lt;p&gt;之前考虑直接将 volley 切换到 okhttp, 底层肯定使用 okhttp, 请求队列也使用 okhttp。但是考虑到代价可能比较大，所以我是基于网上给的解决方案： 上层队列依然使用 volley,但是对于底层发送请求的地方，可以直接切换到 okhttp.&lt;/p&gt;
&lt;h3 id=&quot;代理异常？&quot;&gt;&lt;a href=&quot;#代理异常？&quot; class=&quot;headerlink&quot; title=&quot;代理异常？&quot;&gt;&lt;/a&gt;代理异常？&lt;/h3&gt;&lt;p&gt;切换成功后，遇到的第一个问题就是：代理功能没法使用，我们客户端 是有联通流量包的功能的，因此必须要加 代理功能。&lt;/p&gt;
&lt;p&gt;根据 okhttp 里面  issue 的回答，弄好多次都不行，折腾了一两天左右。 最后也懒得管了，先放放，优先解决其他问题。 &lt;/p&gt;
&lt;p&gt;之后过了几天，再回来弄这块的时候，就突然好了，兴奋坏了。赶紧查查和之前的有没有什么差异？&lt;/p&gt;
&lt;p&gt;经过对比后发现：原来是 之前写 volley 的时候是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HttpURLConnection connection;
    if (&amp;quot;https&amp;quot;.equals(url.getProtocol())) {
        Proxy proxy = new Proxy(Proxy.Type.HTTP,
                InetSocketAddress
                        .createUnresolved(FLOWPACKAGEHOST, FLOWPACKAGETCPPORT));
        connection = (HttpURLConnection) url
                .openConnection(proxy);
        connection.addRequestProperty(&amp;quot;Proxy-Authorization&amp;quot;,
                &amp;quot;Basic MzAwMDAwNDU4NDo0Mjk5NjREMEI1Q0QyODc6&amp;quot;);
    } else {
        Proxy proxy = new Proxy(Proxy.Type.HTTP,
                InetSocketAddress
                        .createUnresolved(FLOWPACKAGEHOST, FLOWPACKAGEPORT));
        connection = (HttpURLConnection) url
                .openConnection(proxy);
        connection.addRequestProperty(&amp;quot;Authorization&amp;quot;,
                &amp;quot;Basic MzAwMDAwNDU4NDo0Mjk5NjREMEI1Q0QyODc6&amp;quot;);
    }
    connection.addRequestProperty(&amp;quot;Proxy-Connection&amp;quot;, &amp;quot;Keep-Alive&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要区分了 https 和 http, 然后里面传入的 key 和 端口号都不一样。&lt;/p&gt;
&lt;p&gt;但是在 okhttp 里面貌似是不需要区分的。只需要这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
     * 设置联通流量 代理功能
     * @param builder
     */
    private void setUnicomProxy(OkHttpClient.Builder builder) {
        //添加联通代理功能
        if (TrafficUtil.getUnicomProxyAvailable()) {
            Authenticator proxyAuthenticator = new Authenticator() {
                @Override
                public okhttp3.Request authenticate(Route route, Response response) throws IOException {
                    return response.request().newBuilder().header(&amp;quot;Proxy-Authorization&amp;quot;, &amp;quot;Basic &amp;quot; +
                            &amp;quot;MzAwMDAwNDU4NDo0Mjk5NjREMEI1Q0QyODc6&amp;quot;).header(&amp;quot;Proxy-Connection&amp;quot;,
                            &amp;quot;Keep-Alive&amp;quot;).build();
                }
            };

            builder.proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(FLOWPACKAGEHOST,
                    FLOWPACKAGETCPPORT)));
            builder.proxyAuthenticator(proxyAuthenticator);
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以了。&lt;br&gt;&lt;code&gt;FLOWPACKAGEHOST -&amp;gt; test.proxy.1111.com (这是域名)&lt;/code&gt;&lt;br&gt;&lt;code&gt;FLOWPACKAGETCPPORT -&amp;gt; 8143&lt;/code&gt;&lt;br&gt;这还是真是一个偶然的机会，歪打正着，否则估计得排除好久。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;备注： 上面 key 我随意修改了几个字符，看看就行，想要直接使用肯定不行的， 哈哈&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;SSL-STL证书-出错？&quot;&gt;&lt;a href=&quot;#SSL-STL证书-出错？&quot; class=&quot;headerlink&quot; title=&quot;SSL/STL证书 出错？&quot;&gt;&lt;/a&gt;SSL/STL证书 出错？&lt;/h3&gt;&lt;p&gt;这是第二个遇到的问题，证书一直没法用，一使用 https 的接口就失败。最后解决办法是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    @NonNull
    private SSLContext getSslContext(InputStream... certificates) {
        SSLContext sslContext = null;

        try {
            CertificateFactory certificateFactory = CertificateFactory.getInstance(&amp;quot;X.509&amp;quot;);
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            keyStore.load(null);
            int index = 0;
            for (InputStream certificate : certificates) {
                String certificateAlias = Integer.toString(index++);
                keyStore.setCertificateEntry(certificateAlias, certificateFactory.generateCertificate
                        (certificate));
                try {
                    if (certificate != null)
                        certificate.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            sslContext = SSLContext.getInstance(&amp;quot;TLS&amp;quot;);

            TrustManagerFactory trustManagerFactory =
                    TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());

            trustManagerFactory.init(keyStore);
            sslContext.init(null, trustManagerFactory.getTrustManagers(),
                    new SecureRandom());

        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (KeyManagementException e) {
            e.printStackTrace();
        } catch (Exception e){
            e.printStackTrace();
        }   finally {
        }

        return sslContext;
    }

/**
     * 启用 OkHttps 域名校验功能
     * @param builder
     */
    private void setOkhttpSSLContext(OkHttpClient.Builder builder) {
        SSLContext sslContext = getSslContext(KaolaApplication.mContext.getResources().openRawResource(R
                .raw.kl_magic));

        if (sslContext != null) {
            builder.hostnameVerifier(new HostnameVerifier() {
                @Override
                public boolean verify(String hostname, SSLSession session) {
                    HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
                    return hostnameVerifier.verify(&amp;quot;xxx.com&amp;quot;, session); //启用xxx 域名校验 (这里是一个非常重要的地方，缺少了这一步肯定不行)
                }
            });
            builder.sslSocketFactory(sslContext.getSocketFactory());
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这句是非常重要的：&lt;br&gt;&lt;code&gt;hostnameVerifier.verify(&amp;quot;xxx.com&amp;quot;, session);&lt;/code&gt;主要是进行 https 的域名校验，用证书匹配你的域名，如果匹配成功，那么就可以直接使用，否则 https 握手失败，无法正确发送请求。&lt;/p&gt;
&lt;p&gt;之前尝试过使用 使用&lt;br&gt;    builder.hostnameVerifier(new AllowAllHostnameVerifier());&lt;/p&gt;
&lt;p&gt;这样可以忽略证书，默认都允许，也能正常使用，但是 存在安全隐患。&lt;/p&gt;
&lt;h3 id=&quot;post-参数不能为空？&quot;&gt;&lt;a href=&quot;#post-参数不能为空？&quot; class=&quot;headerlink&quot; title=&quot;post 参数不能为空？&quot;&gt;&lt;/a&gt;post 参数不能为空？&lt;/h3&gt;&lt;p&gt;这个问题遇到的比较奇葩，原因是，我们的 https  的接口使用了 post 请求，但是 post 里面没有参数，通用参数都放在 url 后面追加了，这就造成 这个 request 没有 body( body 就是对 post 请求的参数 处理下).&lt;/p&gt;
&lt;p&gt;但是 okhttp 对于参数为空的请求，直接返回 null, 所以对于这种不规范的 接口定义就报错了。在 &lt;a href=&quot;https://github.com/square/okhttp/issues/751&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;okhttp issue&lt;/a&gt; 里面也有关于这个的讨论，说明这个不符合 http 的标准，所以不能发出请求。解决办法是添加一个空的 参数就可以，但是绝不能 “”:””, 里面必须有值，因此我这边和服务器约定了一下，用 temp 代替，服务器也肯定不会用这个字段取数据。&lt;/p&gt;
&lt;p&gt;具体参考这个：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void addRequest(int method, final Map&amp;lt;String, String&amp;gt; params, final String baseUrl,
                           final TypeReference&amp;lt;? extends BaseResponse&amp;gt; type, final JsonResultCallback callback) {
            ......
          if (params.size() == 0 &amp;amp;&amp;amp; method == Request.Method.POST)
            params.put(&amp;quot;temp&amp;quot;, &amp;quot;temp&amp;quot;); //解决 method POST must have a request body.;
            ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这三个问题解决后，基本就可以放心使用了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这几天打算把项目的 volley 切换到 okhttp,遇到了一些小问题，现在予以整理。&lt;/p&gt;
&lt;p&gt;之前考虑直接将 volley 切换到 okhttp, 底层肯定使用 okhttp, 请求队列也使用 okhttp。但是考虑到代价可能比较大，所以我是基于网上给的解决方案：
    
    </summary>
    
      <category term="okhttp3" scheme="http://gdky005.com/categories/okhttp3/"/>
    
    
      <category term="okhttp3" scheme="http://gdky005.com/tags/okhttp3/"/>
    
  </entry>
  
  <entry>
    <title>分享Java Collection 的一张图</title>
    <link href="http://gdky005.com/2016/06/20/Java-Collection-Cheat-Sheet/"/>
    <id>http://gdky005.com/2016/06/20/Java-Collection-Cheat-Sheet/</id>
    <published>2016-06-20T09:09:48.000Z</published>
    <updated>2016-06-20T10:18:56.000Z</updated>
    
    <content type="html">&lt;p&gt;在这张图中展示了 Collection 相关一些常用类，例如最常见的 Map（Interface）, Collection(Interface), List(Interface) 等等&lt;/p&gt;
&lt;p&gt;我们可以看出他们之间的关系以及差别。&lt;/p&gt;
&lt;p&gt;例如：HashMap, HastTable,  Vector 和 LinkedList等&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xlcno.com1.z0.glb.clouddn.com/java_array_big_img.png&quot; alt=&quot;Java Collection Cheat Sheet&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在这张图中展示了 Collection 相关一些常用类，例如最常见的 Map（Interface）, Collection(Interface), List(Interface) 等等&lt;/p&gt;
&lt;p&gt;我们可以看出他们之间的关系以及差别。&lt;/p&gt;
&lt;p&gt;例如：HashMap,
    
    </summary>
    
      <category term="Java" scheme="http://gdky005.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://gdky005.com/tags/Java/"/>
    
  </entry>
  
</feed>
