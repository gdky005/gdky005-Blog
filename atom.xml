<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独狂饮</title>
  
  <subtitle>只要有百分之一的梦想，就要付出百分之百的努力。努力不一定成功，但是不努力就一定不会成功！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gdky005.com/"/>
  <updated>2021-10-20T15:35:01.678Z</updated>
  <id>http://gdky005.com/</id>
  
  <author>
    <name>gdky005</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录一次服务器被拿去挖矿的经历</title>
    <link href="http://gdky005.com/2021/10/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%8B%BF%E5%8E%BB%E6%8C%96%E7%9F%BF%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>http://gdky005.com/2021/10/20/记录一次服务器被拿去挖矿的经历/</id>
    <published>2021-10-20T15:34:07.000Z</published>
    <updated>2021-10-20T15:35:01.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器被刷了？"><a href="#服务器被刷了？" class="headerlink" title="服务器被刷了？"></a>服务器被刷了？</h1><p>最近阿里云总是提示各种风险，只是简单处理，没太在意。</p><p>今天想读取服务器的一个 静态文件，总是失败，偶尔成功一两次，连接阿里云服务器也总是挂，一度怀疑公司网络的问题，然后通过远程打包的时候也挂了一次，说明肯定是服务器有问题了。</p><p>回家发现是 Yapi 的一个漏洞导致会被挖矿，于是赶紧禁用 Yapi 的相关服务。</p><p>怀疑可能有残留文件，那就得好好查查。首先根据阿里云报警信息里面的文件路径排查，该删除的删除。</p><h2 id="1-排查到一例："><a href="#1-排查到一例：" class="headerlink" title="1. 排查到一例："></a>1. 排查到一例：</h2><p><img src="https://img-blog.csdnimg.cn/20211020232639907.png" alt="file"></p><p>根据这个地址排查到，这是猫池，进而得到他的偷窃钱包地址。</p><p>猫池地址：<a href="https://c3pool.com/cn/" target="_blank" rel="noopener">https://c3pool.com/cn/</a></p><p><img src="https://img-blog.csdnimg.cn/20211020232640520.png" alt="file"></p><p><strong> 竟然有 277 个矿工为期服务，还赚了好几百。</strong></p><p><strong> 0.0444 = 55 人民币，  0.067/0.004*55 + 55 == 976 人民币。 接近 1 千块，用着别人的服务器，转自己的钱。 </strong></p><p>钱包地址是：43sEd48rjD2TpXjv7ptYWq1XWLGfpRKw25w1XtNd7rQDFpxrtcvu6KrNnmiX2Ui3Zb2rqEmdbGcg4gdW1ptApHGjAc6mqww</p><p>后面可以监控看看，他到底能赚多少。</p><h2 id="2-接着往下追查，发现第二个矿机程序："><a href="#2-接着往下追查，发现第二个矿机程序：" class="headerlink" title="2. 接着往下追查，发现第二个矿机程序："></a>2. 接着往下追查，发现第二个矿机程序：</h2><p><img src="https://img-blog.csdnimg.cn/20211020232640905.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/20211020232641178.png" alt="file"></p><p>目前没有量。</p><p>发现另外一个问题：</p><p><img src="https://img-blog.csdnimg.cn/20211020232641454.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/20211020232641726.png" alt="file"></p><p>来自上海阿里云服务器的某人。</p><h2 id="3-发现和第一条相同的记录："><a href="#3-发现和第一条相同的记录：" class="headerlink" title="3. 发现和第一条相同的记录："></a>3. 发现和第一条相同的记录：</h2><p>43sEd48rjD2TpXjv7ptYWq1XWLGfpRKw25w1XtNd7rQDFpxrtcvu6KrNnmiX2Ui3Zb2rqEmdbGcg4gdW1ptApHGjAc6mqww</p><p><img src="https://img-blog.csdnimg.cn/20211020232642218.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/20211020232642693.png" alt="file"></p><h3 id="3-1-发现第三例："><a href="#3-1-发现第三例：" class="headerlink" title="3.1 发现第三例："></a>3.1 发现第三例：</h3><p><img src="https://img-blog.csdnimg.cn/20211020232643199.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/20211020232643519.png" alt="file"></p><h2 id="4-发现特例："><a href="#4-发现特例：" class="headerlink" title="4. 发现特例："></a>4. 发现特例：</h2><p><img src="https://img-blog.csdnimg.cn/20211020232643815.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/20211020232644123.png" alt="file"></p><h2 id="5-又发现一例："><a href="#5-又发现一例：" class="headerlink" title="5. 又发现一例："></a>5. 又发现一例：</h2><p>46n4YeKAjUp2FcJnx8SFEb5CMK3kMRJ9o9MEuCzWtv2VEF5LYeq6TJKSWV3h4sEj4CQiUmsb2dNMEQcKJZJM8zCYFp7wFoy</p><p><img src="https://img-blog.csdnimg.cn/20211020232644434.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/20211020232644898.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/20211020232645262.png" alt="file"></p><p>发现上面的恶意程序，还保存了文件到本地，已经删除处理。</p><h2 id="进一步发现"><a href="#进一步发现" class="headerlink" title="进一步发现"></a>进一步发现</h2><p>所有的域名都从  <a href="https://jhx15.zzlxrj.com/Uploads/image/goods/2021-06-07/mysql.tar.gz" target="_blank" rel="noopener">https://jhx15.zzlxrj.com/Uploads/image/goods/2021-06-07/mysql.tar.gz</a>  下载数据，之前也有，说明肯定是该服务器的使用人操作。</p><p><img src="https://img-blog.csdnimg.cn/20211020232645640.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/2021102023264615.png" alt="file"></p><h3 id="原来是你！！！"><a href="#原来是你！！！" class="headerlink" title="原来是你！！！"></a>原来是你！！！</h3><p><strong>郑州连续软件技术有限公司</strong>，看来得深扒一下。</p><p><img src="https://img-blog.csdnimg.cn/20211020232646382.png" alt="file"></p><p>关联了这么多域名，一看就不是正经的公司。</p><p><img src="https://img-blog.csdnimg.cn/20211020232646590.png" alt="file"></p><p>既然查到了公司，那就QQ 联系下呗。</p><p><img src="https://img-blog.csdnimg.cn/20211020232646825.png" alt="file"></p><p>完整邮箱是：<a href="mailto:domainabuse@service.aliyun.com" target="_blank" rel="noopener">domainabuse@service.aliyun.com</a></p><p><img src="https://img-blog.csdnimg.cn/20211020232647113.png" alt="file"></p><p>新注册了很多域名嘛。</p><p>至此，已经排查完毕。后面就看怎么玩了。</p><p><img src="https://img-blog.csdnimg.cn/20211020232647657.png" alt="file"></p><h3 id="又起疑云？"><a href="#又起疑云？" class="headerlink" title="又起疑云？"></a>又起疑云？</h3><p>第二天早上发现阿里云又有警报，追查了下是越南，上海的 ip 在大量使用内存，重置了下系统。</p><p>立刻升级 YApi 的版本到 1.9.5。</p><p>既然你是通过 YApi 控住我的，那我得查查看你都干了一些什么？</p><p>通过存在的数据库能查到这几张表：</p><p><img src="https://img-blog.csdnimg.cn/20211020232647826.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/2021102023264864.png" alt="file"></p><h3 id="原来是这么攻击我的呀"><a href="#原来是这么攻击我的呀" class="headerlink" title="原来是这么攻击我的呀"></a>原来是这么攻击我的呀</h3><p>感觉 adv_mock 和  adv_mock_case  有点意思，追进去看看：</p><p><img src="https://img-blog.csdnimg.cn/20211020232648374.png" alt="file"></p><p><img src="https://img-blog.csdnimg.cn/20211020232648670.png" alt="file"></p><p>喝，动态执行脚本呢，嗯，有点意思。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器被刷了？&quot;&gt;&lt;a href=&quot;#服务器被刷了？&quot; class=&quot;headerlink&quot; title=&quot;服务器被刷了？&quot;&gt;&lt;/a&gt;服务器被刷了？&lt;/h1&gt;&lt;p&gt;最近阿里云总是提示各种风险，只是简单处理，没太在意。&lt;/p&gt;
&lt;p&gt;今天想读取服务器的一个 静态文件
      
    
    </summary>
    
    
      <category term="服务器被刷的经历" scheme="http://gdky005.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E5%88%B7%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 如何在切换页面的时候，把参数传到下一个页面?</title>
    <link href="http://gdky005.com/2019/09/10/Flutter-%E5%A6%82%E4%BD%95%E5%9C%A8%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%8A%8A%E5%8F%82%E6%95%B0%E4%BC%A0%E5%88%B0%E4%B8%8B%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2/"/>
    <id>http://gdky005.com/2019/09/10/Flutter-如何在切换页面的时候，把参数传到下一个页面/</id>
    <published>2019-09-10T09:27:24.000Z</published>
    <updated>2019-09-10T09:45:12.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>2019年09月10日 Google 刚把 Flutter 1.9 版本发布，相信 2.0 应该不远了。这次更新将 Flutter 的 web 代码合并到主 repo 了，但是 web 的还处于测试版本，2.0 应该是包含 web 的，让我们期待吧。</p><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/flutter_routes/DraggedImage.png" alt="DraggedImage.png"></p><p>看到升级提示，立马升级本地 Flutter SDK。</p><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/flutter_routes/DraggedImage-1.png" alt="DraggedImage-1.png"></p><h1 id="本期讲解Flutter-路由传递"><a href="#本期讲解Flutter-路由传递" class="headerlink" title="本期讲解Flutter 路由传递"></a>本期讲解Flutter 路由传递</h1><p>这是一个大的概述图。</p><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/flutter_routes/DraggedImage-2.png" alt="DraggedImage-2.png"></p><p>当 app 的页面变多的时候，就需要考虑页面传值的问题，在第一个页面如何把数据传递到 另外一个页面？最最基本的方法是在打开新页面，传递参数过去。但当 app 变得很大或者功能变多，你会发现传值是一件费劲的事情。例如前期设计的时候，只需要一个参数，但后面发现业务可能需要三个参数，如果再追加两个参数也不是不可以，就是不太优雅，而且可能要修改很多地方。</p><h2 id="跳转到一个界面"><a href="#跳转到一个界面" class="headerlink" title="跳转到一个界面"></a>跳转到一个界面</h2><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/flutter_routes/device-2019-09-09-184344.gif" alt="device-2019-09-09-184344 (1).gif"></p><p>先简单解释一下，下面会使用到， App 启动一个主界面，然后点击中间按钮，会打开第二个界面。点击第二个界面的右上角，会返回到之前的界面。具体代码如下：</p><pre><code>import &apos;package:flutter/material.dart&apos;;import &apos;package:flutter/widgets.dart&apos;;class Test extends StatefulWidget {  @override  _TestState createState() =&gt; _TestState();}class _TestState extends State&lt;Test&gt; {  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text(&apos;路由&apos;),      ),      body: Center(        child: FloatingActionButton(          shape: BeveledRectangleBorder(),          child: Text(&apos;按钮&apos;),          onPressed: () {            //使用路由打开 第二个界面            Navigator.push(                context, MaterialPageRoute(builder: (context) =&gt; TwoPage()));          },        ),      ),    );  }}class TwoPage extends StatefulWidget {  @override  _TwoPageState createState() =&gt; _TwoPageState();}class _TwoPageState extends State&lt;TwoPage&gt; {  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text(&apos;第二页&apos;),      ),      body: Column(        children: &lt;Widget&gt;[          SizedBox(height: 100),          Text(&apos;传递过来的值：\n&apos;),          SizedBox(height: 100),          Center(            child: FloatingActionButton(              shape: BeveledRectangleBorder(),              child: Text(&apos;返回&apos;),              onPressed: () {                // 返回到上一个界面                Navigator.pop(context);              },            ),          )        ],      ),    );  }}</code></pre><h2 id="使用构造传参"><a href="#使用构造传参" class="headerlink" title="使用构造传参"></a>使用构造传参</h2><p>使用构造参数把参数传递过去，在 TwoPage 中接受参数可直接用 widget.x , x 表示 _TwoPageState 传递过来的 widget 中包含值。</p><pre><code>class _TestState extends State&lt;Test&gt; {        ...    onPressed: () {        String name = &quot;Wang&quot;;        String age = &quot;99&quot;;        Navigator.push(context, MaterialPageRoute(builder: (context) =&gt; TwoPage(name, age)));      },    ...}class TwoPage extends StatefulWidget {  String name;  String age;  TwoPage(this.name, this.age);    ...    Text(&apos;传递过来的值：\n ${widget.name}_${widget.age}&apos;),    ...}</code></pre><h3 id="List（数组）传参"><a href="#List（数组）传参" class="headerlink" title="List（数组）传参"></a>List（数组）传参</h3><p>这里演示了 使用构造传递一个 List 类型的数, 使用 widget.data 的列表脚本获取数据。</p><pre><code>class _TestState extends State&lt;Test&gt; {        ...        dynamic data = [&apos;name1&apos;, &apos;age&apos;];    Navigator.push(context, MaterialPageRoute(builder: (context) =&gt; TwoPage(data)));    ...}class TwoPage extends StatefulWidget {    ...    dynamic data;    TwoPage(this.data);    ...}class _TwoPageState extends State&lt;TwoPage&gt; {    ...    Text(&apos;传递过来的值：\n ${widget.data[0]}_${widget.data[1]}&apos;),    ...}</code></pre><h3 id="Map-传参"><a href="#Map-传参" class="headerlink" title="Map 传参"></a>Map 传参</h3><p>这里演示了 使用构造传递一个 map 类型的数据。</p><pre><code>class _TestState extends State&lt;Test&gt; {        ...        dynamic map = {              &apos;name&apos;: &quot;Wang_Map&quot;,              &apos;age&apos;: &quot;99&quot;,            };    Navigator.push(context, MaterialPageRoute(builder: (context) =&gt; TwoPage(map)));    ...}class TwoPage extends StatefulWidget {    ...    dynamic map;    TwoPage(this.map);    ...}class _TwoPageState extends State&lt;TwoPage&gt; {    ...    Text(&apos;传递过来的值：\n ${widget.map[&quot;name&quot;]}_${widget.map[&quot;age&quot;]}&apos;),    ...}</code></pre><h2 id="使用带名字的路由传参"><a href="#使用带名字的路由传参" class="headerlink" title="使用带名字的路由传参"></a>使用带名字的路由传参</h2><p>很多时候我们项目比较大，为了统一管理，会使用带名字的路由概念，下面的路由字符串常量可以写成变量，这样后期不管怎么修改里面的值，依赖的地方都是不需要修改的。</p><h2 id="传递一个参数"><a href="#传递一个参数" class="headerlink" title="传递一个参数"></a>传递一个参数</h2><p>这里传递了一个 name 值，演示了一下 使用带名字的路由传递值。</p><pre><code>void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return MaterialApp(      initialRoute: &quot;/&quot;,      routes: {        &quot;/&quot;: (context) =&gt; OnePage(),        &quot;/TwoPage&quot;: (context) =&gt; TwoPage(),      },    );  }}class OnePage extends StatefulWidget {  @override  _OnePageState createState() =&gt; _OnePageState();}class _OnePageState extends State&lt;OnePage&gt; {  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text(&apos;路由页面&apos;),      ),      body: Center(        child: FloatingActionButton(          shape: BeveledRectangleBorder(),          child: Text(&apos;按钮&apos;),          onPressed: () {            String name = &quot;Wang&quot;;            Navigator.pushNamed(context, &apos;/TwoPage&apos;, arguments: name);          },        ),      ),    );  }}class TwoPage extends StatefulWidget {  @override  _TwoPageState createState() =&gt; _TwoPageState();}class _TwoPageState extends State&lt;TwoPage&gt; {  @override  Widget build(BuildContext context) {    dynamic name = ModalRoute.of(context).settings.arguments;    return Scaffold(      appBar: AppBar(        title: Text(&apos;第二页&apos;),      ),      body: Column(        children: &lt;Widget&gt;[          SizedBox(height: 100),          Text(&apos;传递过来的值：\n $name&apos;),          SizedBox(height: 100),          Center(            child: FloatingActionButton(              shape: BeveledRectangleBorder(),              child: Text(&apos;返回&apos;),              onPressed: () {                Navigator.pop(context);              },            ),          )        ],      ),    );  }}</code></pre><h2 id="传递-List（数组）"><a href="#传递-List（数组）" class="headerlink" title="传递 List（数组）"></a>传递 List（数组）</h2><p>我们这里传递的是 List，可以根据角标进行获取对应值，前提是对值了解，一般这里会传递一个列表展示或者一个 List 包含多个不同的值，方便从上一次获取。</p><pre><code>class _OnePageState extends State&lt;OnePage&gt; {    ...    onPressed: () {        dynamic listData = [&apos;name1&apos;, &apos;age&apos;];        Navigator.pushNamed(context, &apos;/TwoPage&apos;, arguments: listData);    }    ...}class _TwoPageState extends State&lt;TwoPage&gt; {  @override  Widget build(BuildContext context) {    dynamic listData = ModalRoute.of(context).settings.arguments;    String name = listData[0];    String age = listData[1];        ...        SizedBox(height: 100),        Text(&apos;传递过来的值：\n $name _ $age&apos;),        SizedBox(height: 100),        ...  }}</code></pre><h2 id="传递-Map"><a href="#传递-Map" class="headerlink" title="传递 Map"></a>传递 Map</h2><p>因为我们传递的是 map，所以在接收的时候需要做一次判断，用 is 判断，预防外界传入其他类型，造成我们程序红屏。这里可以从上一次获取多个不同的参数，使用不同名称获取，这里最好对接收到的值做判断，非空校验等。</p><pre><code>class _OnePageState extends State&lt;OnePage&gt; {    ...    onPressed: () {        dynamic listData = [&apos;name1&apos;, &apos;age&apos;];        Navigator.pushNamed(context, &apos;/TwoPage&apos;, arguments: listData);    }    ...}class _TwoPageState extends State&lt;TwoPage&gt; {  @override  Widget build(BuildContext context) {    String name;    String age;    dynamic mapData = ModalRoute.of(context).settings.arguments;    // 可以做一次校验数据安全，防止类型不匹配    if (mapData is Map) {      Map data = mapData;      name = data[&apos;name&apos;];      age = data[&apos;age&apos;];    }        ...        SizedBox(height: 100),        Text(&apos;传递过来的值：\n $name _ $age&apos;),        SizedBox(height: 100),        ...  }}</code></pre><h2 id="普通路由带参"><a href="#普通路由带参" class="headerlink" title="普通路由带参"></a>普通路由带参</h2><p>和带路由名字的方式基本一样，不过写的方式略有不同，需要把参数放入 settings 后面。</p><pre><code>Navigator.of(context).push(new MaterialPageRoute(                    builder: (context) {                      return NewRouteWidget(); //写上要跳转到的页面                    },                    settings:                        RouteSettings(arguments: {&apos;name&apos;: &apos;postbird&apos;}), // 传参                    fullscreenDialog: true));</code></pre><h2 id="带参数从二级页面返回上一级"><a href="#带参数从二级页面返回上一级" class="headerlink" title="带参数从二级页面返回上一级"></a>带参数从二级页面返回上一级</h2><p>返回上一级：</p><pre><code>Navigator.pop(context);</code></pre><p>带参数返回上一级:</p><pre><code>Navigator.pop(context, &apos;返回的文本数据&apos;);</code></pre><p>带类型的参数返回：</p><pre><code>Navigator.pop&lt;Map&gt;(context, mapData);Navigator.pop&lt;List&gt;(context, listData);Navigator.pop&lt;T&gt;(context, data);</code></pre><p>在上一级接受返回的值：<br>这里使用 then 接受，也可以使用 await, 只是这种方法更容易理解和接受，逻辑更强，代码简洁。</p><pre><code>Navigator.pushNamed(context, &apos;/TwoPage&apos;, arguments: mapData)                .then((dynamic data) {              print(&quot;返回的值是：$data&quot;);            });</code></pre><hr><h3 id="往期推荐"><a href="#往期推荐" class="headerlink" title="往期推荐"></a>往期推荐</h3><p><a href="http://mp.weixin.qq.com/s?__biz=MzI5MTM3Mzk4Mg==&amp;mid=2247483767&amp;idx=1&amp;sn=d06bcf7edce0d6cd4f6101afb4dd968b&amp;chksm=ec10d786db675e90b7cda7553d8a318f5da920310be138d189f8f66011a9ec5482e257749da5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Flutter 学习脑图笔记，可方便查找与搜索！</a> </p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI5MTM3Mzk4Mg==&amp;mid=2247483756&amp;idx=1&amp;sn=722b424055086420a063135679cf974a&amp;chksm=ec10d79ddb675e8bbe4d4726e525aaa57fb840e365e6f087d18eed8dbcb6e3344398a3d64ae6&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">在云盘至少以 1MB/S 的速度下载 『Flutter 入门到精通全套视频』</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI5MTM3Mzk4Mg==&amp;mid=2247483723&amp;idx=1&amp;sn=4d3977575f5d9364c794f8dc451e64bc&amp;chksm=ec10d7badb675eac1177a8a083cd04472a58ae16bf00608466a98fd3219210b5159e975f56b4&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Flutter 也能开发 Web? （文末提供 Flutter 学习视频地址哦）</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI5MTM3Mzk4Mg==&amp;mid=2247483731&amp;idx=1&amp;sn=8b8e2618fe71b58270b5a3b9c777041f&amp;chksm=ec10d7a2db675eb449eaa2bdb13dbcfc13c2c6462bd2b6c2dfb9f147fd476bf503306450164e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">马云说要 669，而我却整 Flutter 环境踩坑花了一整天 （附加：Flutter快速起步 短视频）</a></p><p><img src="https://upload-images.jianshu.io/upload_images/720880-019451fc09c241a7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;2019年09月10日 Google 刚把 Flutter 1.9 版本发布，相信 2.0 应该不远了。这次更新将 Flutter 的 we
      
    
    </summary>
    
      <category term="Flutter" scheme="http://gdky005.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://gdky005.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 学习脑图笔记，可方便查找与搜索！</title>
    <link href="http://gdky005.com/2019/08/29/Flutter-%E5%AD%A6%E4%B9%A0%E8%84%91%E5%9B%BE%E7%AC%94%E8%AE%B0%EF%BC%8C%E5%8F%AF%E6%96%B9%E4%BE%BF%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%90%9C%E7%B4%A2%EF%BC%81/"/>
    <id>http://gdky005.com/2019/08/29/Flutter-学习脑图笔记，可方便查找与搜索！/</id>
    <published>2019-08-29T03:24:42.000Z</published>
    <updated>2019-08-29T03:32:41.007Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 学习笔记思维导图，包含常用组件的基础属性，可在源文件中直接搜索，也可作为一个常用必备的手册。</p><p><img src="https://raw.githubusercontent.com/gdky005/FlutterNodeTips/master/FlutterNode_%20thumb.png" alt></p><h2 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h2><ul><li>新手：便于新手学习和理解常用的组件，以及基础属性。</li><li>大小牛：以备不时需的查找。</li></ul><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>包含三种类型的文件，具体如下：</p><ul><li>PNG  基础图片类型，可以浏览全部，放大缩小，可分区域查看。</li><li>PDF  标准的 PDF，不仅是查阅，也可以直接根据关键字搜索。</li><li>MindNode  原始文件，可以在此基础上查找和修改等。</li></ul><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><p><a href="https://github.com/gdky005/FlutterNodeTips" target="_blank" rel="noopener">https://github.com/gdky005/FlutterNodeTips</a></p><h2 id="其他更多"><a href="#其他更多" class="headerlink" title="其他更多"></a>其他更多</h2><p><a href="https://www.gdky005.com" target="_blank" rel="noopener">https://www.gdky005.com</a></p><h2 id="Flutter-学习交流群"><a href="#Flutter-学习交流群" class="headerlink" title="Flutter 学习交流群"></a>Flutter 学习交流群</h2><p>添加：gdky005，拉群，也可直接扫码进入。</p><p><img src="https://raw.githubusercontent.com/gdky005/FlutterNodeTips/master/organization.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter 学习笔记思维导图，包含常用组件的基础属性，可在源文件中直接搜索，也可作为一个常用必备的手册。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gdky005/FlutterNodeTips/master/
      
    
    </summary>
    
      <category term="flutter" scheme="http://gdky005.com/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://gdky005.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>业务开发中自定义 EditText 光标不显示？</title>
    <link href="http://gdky005.com/2019/04/14/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-EditText-%E5%85%89%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA%EF%BC%9F/"/>
    <id>http://gdky005.com/2019/04/14/业务开发中自定义-EditText-光标不显示？/</id>
    <published>2019-04-14T03:28:03.000Z</published>
    <updated>2019-04-14T03:38:51.894Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录一个业务开发遇到的问题。最近996赶项目，UI 妹子说你这个输入框的光标颜色是红色的，不好看，我要换成橘黄的。好吧，那就修改下。<br>直接使用这个代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;EditText</span><br><span class="line">            android:<span class="attribute">id</span>=<span class="string">"@+id/et_forget_password_verify_code"</span></span><br><span class="line">            <span class="attribute">style</span>=<span class="string">"@style/EditTextNoPaddingStyle"</span></span><br><span class="line">            android:<span class="attribute">inputType</span>=<span class="string">"textVisiblePassword"</span></span><br><span class="line">            android:<span class="attribute">hint</span>=<span class="string">"@string/register_verify_code_hint"</span></span><br><span class="line">            android:<span class="attribute">maxLength</span>=<span class="string">"6"</span>/&gt;</span><br></pre></td></tr></table></figure><p>style.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"EditTextNoPaddingStyle"</span> <span class="attr">parent</span>=<span class="string">"LayoutMW"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textCursorDrawable"</span>&gt;</span>@color/color_edit_text_cursor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果在三星手机显示正常，但是测试同学说在 小米和华为手机，不显示光标，只有输入一个后，才会显示，但是光标也不闪动。</p><p>最后排查了下，具体原因是：textCursorDrawable 后面一定要跟 drawable ，否则某些手机厂商定制系统兼容不好，就显示不出来，或者不闪动。</p><p>解决办法是：<br>添加 edit_text_cursor.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:width</span>=<span class="string">"@dimen/dp_05"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-family: Arial, Helvetica, sans-serif;"</span>&gt;</span><span class="comment">&lt;!-- 光标宽度可以自己定义 --&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/color_edit_text_cursor"</span>/&gt;</span><span class="comment">&lt;!-- 光标颜色可以自己定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><p>style.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"EditTextNoPaddingStyle"</span> <span class="attr">parent</span>=<span class="string">"LayoutMW"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textCursorDrawable"</span>&gt;</span>@drawable/edit_text_cursor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就显示正常了。</p><p>同此的理，很多我们在自己的手机或者测试机显示正常，但是不代表在所有手机显示正常，所有要多兼容，选择最安全的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里记录一个业务开发遇到的问题。最近996赶项目，UI 妹子说你这个输入框的光标颜色是红色的，不好看，我要换成橘黄的。好吧，那就修改下。&lt;br&gt;直接使用这个代码：&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>QPM 之同类 PM 对比</title>
    <link href="http://gdky005.com/2019/01/03/QPM-%E4%B9%8B%E5%90%8C%E7%B1%BB-PM-%E5%AF%B9%E6%AF%94/"/>
    <id>http://gdky005.com/2019/01/03/QPM-之同类-PM-对比/</id>
    <published>2019-01-03T07:23:22.000Z</published>
    <updated>2019-01-03T07:23:46.334Z</updated>
    
    <content type="html"><![CDATA[<p>QPM 的注意事项以及和其他同类 PM 类软件的对比。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>QPM 的悬浮窗如果开启过多的功能，可能会影响性能，推荐：需要什么功能，就开启什么开关，这样把影响降低到最低。</p><h2 id="QPM-与其他同类-PM-的区别"><a href="#QPM-与其他同类-PM-的区别" class="headerlink" title="QPM 与其他同类 PM 的区别"></a>QPM 与其他同类 PM 的区别</h2><p>与其他同类 QPM 工具相比，有以下优势：</p><ol><li>任何一个内置的 QPM 的 App, 可以直接可视化相关性能和数据；</li><li>内置多个参数指标开关，想用哪个就开哪个；</li><li>精简模式，只显示关注的数据指标；</li><li>自定义了五种模板，可以通过简单的API，直接将 app 的变化数据动态展示；</li><li>屏幕录制；</li><li>H5页面性能监控；</li><li>四大组件的展示，并可以直接跳转到对应的 Activity 中；</li><li>SharedPreferences 文件直接浏览和修改相应的 key 值；</li><li>通过 OkHttp 展示相关的网络请求信息；</li><li>当前 App 的流量使用情况。</li></ol><h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><p>QPM:  <a href="https://github.com/ZhuoKeTeam/QPM" target="_blank" rel="noopener">https://github.com/ZhuoKeTeam/QPM</a></p><p>请给 QPM  一个 Star 吧! </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;QPM 的注意事项以及和其他同类 PM 类软件的对比。&lt;/p&gt;
&lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;p&gt;QPM 的悬浮窗如果开启过多的功能，可能会影响性能，推
      
    
    </summary>
    
      <category term="QPM" scheme="http://gdky005.com/categories/QPM/"/>
    
    
      <category term="QPM, 性能优化, 组件" scheme="http://gdky005.com/tags/QPM-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
</feed>
