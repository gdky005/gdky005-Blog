<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独狂饮</title>
  
  <subtitle>只要有百分之一的梦想，就要付出百分之百的努力。努力不一定成功，但是不努力就一定不会成功！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gdky005.com/"/>
  <updated>2018-03-30T03:40:00.000Z</updated>
  <id>http://gdky005.com/</id>
  
  <author>
    <name>gdky005</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 和 Android Studio 命令行走 Shadowsocks 代理</title>
    <link href="http://gdky005.com/2018/03/29/Mac-%E5%92%8C-Android-Studio-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%B5%B0-Shadowsocks-%E4%BB%A3%E7%90%86/"/>
    <id>http://gdky005.com/2018/03/29/Mac-和-Android-Studio-命令行走-Shadowsocks-代理/</id>
    <published>2018-03-29T03:58:01.000Z</published>
    <updated>2018-03-30T03:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天同事说拉了一份 Android 代码，但是在他的电脑上总是构建失败，说下载不下来一些组件。经常查看 log, 发现确实是需要翻墙。<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_0.jpg" alt=""></p><h2 id="使用-Shadowsocks-的-PAC-自动模式始终失败"><a href="#使用-Shadowsocks-的-PAC-自动模式始终失败" class="headerlink" title="使用 Shadowsocks 的 PAC 自动模式始终失败"></a>使用 Shadowsocks 的 PAC 自动模式始终失败</h2><p>本地开启自己搭建的 Shadowsocks，使用 PAC 自动模式。代理地址是：<code>172.0.0.1 ，端口：1089</code></p><p>在 Android Studio 中如下设置，未成功。<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_1.jpg" alt=""></p><p>尝试以下，也没有成功。<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_2.jpg" alt=""> <img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_3.jpg" alt=""></p><p>经过 <img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_4.jpg" alt=""> 的测试，发现，这种设置方法是错误的。不会成功，至少对于 mac 来说是这样的。</p><h2 id="开启正确的全局代理模式"><a href="#开启正确的全局代理模式" class="headerlink" title="开启正确的全局代理模式"></a>开启正确的全局代理模式</h2><p>首先将 Shadowsocks 设置为全局代理模式，通过 mac 的网络 <img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_5.jpg" alt="">，<img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_6.jpg" alt=""><br>得到代理地址是：<br><code>127.0.0.1, 端口：1086</code></p><p>在 AS 中配置：<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_7.jpg" alt=""></p><p>可以点击图中的 <code>Check connecction</code> 按钮，输入<code>http://www.youtube.com</code> 来检验是否可以走代理。</p><p>正常来说，应该会成功的。如果不行，可能是端口占用，或者一些其他原因，建议重启电脑试试。</p><p>使用 Android Studio 构建项目的时候，默认就可以走代理直接访问下载不了的资源了。但是这个期间是看不到具体过程，如果卡在哪一步，我们很难察觉，只能默默的等待。非常的尴尬，我们可能会想如果使用命令该多好。</p><p>经过一些测试，发现设置命令的时候，还是有一些技巧的。<br>简单点的就是直接使用 <code>export ALL_PROXY=socks5://127.0.0.1:1086</code> 设置当前的窗口生效。 </p><p>然后使用 <code>curl -i http://ip.cn</code> 进行测试，看是否走了代理。</p><p>以下是我的测试结果：<br>未使用代理<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_8.jpg" alt=""></p><p>使用代理：<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_9.jpg" alt=""></p><p>虽然使用了代理，但是 <code>ping</code> 命令还是不通的。<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_10.jpg" alt=""><br>当时总以为失败了，但是经过大姑爷的提醒，用国外的 git clone 命令测试下，就知道了。</p><h2 id="git-clone-测试代理"><a href="#git-clone-测试代理" class="headerlink" title="git clone 测试代理"></a>git clone 测试代理</h2><p>googlesource.com 是 google 的代码开源地址，但是现在几乎停用了，都转到 github。 但是还有部分代码还是 这里，例如: <a href="https://android.googlesource.com/device/asus/deb/" target="_blank" rel="noopener">https://android.googlesource.com/device/asus/deb/</a></p><p>google 和 googlesource.com 默认在国内都是 ping 不通的。所以可以使用这个测试代理是否可用。</p><p>所以选定这个命令：<code>git clone https://android.googlesource.com/device/asus/deb</code></p><p>不开代理，默认提示失败：<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_11.jpg" alt=""></p><p>开代理，下载成功：<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_12.jpg" alt=""></p><p>到这里，命令行已经可用了。</p><h2 id="Android-Studio-设置代理"><a href="#Android-Studio-设置代理" class="headerlink" title="Android Studio 设置代理"></a>Android Studio 设置代理</h2><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_13.jpg" alt=""></p><h2 id="更新-Android-SDK"><a href="#更新-Android-SDK" class="headerlink" title="更新 Android SDK"></a>更新 Android SDK</h2><h3 id="尝试使用-android-sdk-工具更新最新组件"><a href="#尝试使用-android-sdk-工具更新最新组件" class="headerlink" title="尝试使用 android sdk 工具更新最新组件"></a>尝试使用 android sdk 工具更新最新组件</h3><p>新版本的 Android SDK 不允许直接通过命令行更新 SDK 了，需要配合 Android Studio 一起才能更新，让人有些不爽。</p><p>可以在这里下载对应平台的 zip, 解压后直接替换自带的 tools 等目录，就可以和以前一样使用 <code>android</code> 命令打开 Android SDK 的 UI 更新界面。<br><a href="https://pan.baidu.com/s/1xAOFWhI_nVNByHyuYJQQog" target="_blank" rel="noopener">https://pan.baidu.com/s/1xAOFWhI_nVNByHyuYJQQog</a></p><h3 id="在-Android-Studio-中更新-SDK"><a href="#在-Android-Studio-中更新-SDK" class="headerlink" title="在 Android Studio 中更新 SDK"></a>在 Android Studio 中更新 SDK</h3><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_14.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_15.jpg" alt=""></p><h2 id="常用公开的代理服务器"><a href="#常用公开的代理服务器" class="headerlink" title="常用公开的代理服务器"></a>常用公开的代理服务器</h2><p>大连东软信息学院镜像服务器地址:<br>    <a href="http://mirrors.neusoft.edu.cn" target="_blank" rel="noopener">http://mirrors.neusoft.edu.cn</a> 端口：80</p><p>北京化工大学镜像服务器地址:<br>    IPv4: <a href="http://ubuntu.buct.edu.cn/" target="_blank" rel="noopener">http://ubuntu.buct.edu.cn/</a> 端口：80<br>    IPv4: <a href="http://ubuntu.buct.cn/" target="_blank" rel="noopener">http://ubuntu.buct.cn/</a> 端口：80<br>    IPv6: <a href="http://ubuntu.buct6.edu.cn/" target="_blank" rel="noopener">http://ubuntu.buct6.edu.cn/</a> 端口：80</p><p>上海GDG镜像服务器地址:<br>    <a href="http://sdk.gdgshanghai.com" target="_blank" rel="noopener">http://sdk.gdgshanghai.com</a> 端口：8000</p><p>参考地址：<a href="https://www.cnblogs.com/maxinliang/p/5083495.html" target="_blank" rel="noopener">https://www.cnblogs.com/maxinliang/p/5083495.html</a></p><p>具体的使用的时候，不需要 http, 直接 域名，即：mirrors.neusoft.edu.cn</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>先开启 SS 的全局模式，查看到代理的 ip 和 port, 然后命令行每次需要设置下 <code>export ALL_PROXY=socks5://127.0.0.1:1086</code>, 只对当前窗口有效。至于 ping 命令不行，而代码库能拉下来的原因是：<br>SS 不会代理到 ICMP 包 同理也无法测试路由跟踪。<br>因为ping用的icmp， 代理没代理icmp。</p><pre><code>nc -X 5 -x 127.0.0.1:1086 youtube.com 443 -v-x 是当前代理的端口和地址-X 5 表示 socks5-X 4 表示 socks4-X connect 表示 https</code></pre><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_16.jpg" alt=""></p><p>测试结果是：<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/mac_doc_shadowsocks/mac_doc_shadowsocks_17.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天同事说拉了一份 Android 代码，但是在他的电脑上总是构建失败，说下载不下来一些组件。经常查看 log, 发现确实是需要翻墙。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gdky005/PictureResourc
      
    
    </summary>
    
      <category term="Shadowsocks" scheme="http://gdky005.com/categories/Shadowsocks/"/>
    
    
      <category term="Shadowsocks，代理" scheme="http://gdky005.com/tags/Shadowsocks%EF%BC%8C%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Android开发需要关注的几个地址</title>
    <link href="http://gdky005.com/2018/01/29/Android%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9C%B0%E5%9D%80/"/>
    <id>http://gdky005.com/2018/01/29/Android开发需要关注的几个地址/</id>
    <published>2018-01-29T03:53:04.000Z</published>
    <updated>2018-02-27T03:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-Studio下载归档地址"><a href="#Android-Studio下载归档地址" class="headerlink" title="Android Studio下载归档地址"></a>Android Studio下载归档地址</h2><p><a href="https://developer.android.com/studio/archive.html" target="_blank" rel="noopener">https://developer.android.com/studio/archive.html</a></p><h2 id="Android-Studio更新地址"><a href="#Android-Studio更新地址" class="headerlink" title="Android Studio更新地址"></a>Android Studio更新地址</h2><p><a href="https://androidstudio.googleblog.com/" target="_blank" rel="noopener">https://androidstudio.googleblog.com/</a></p><h2 id="gradle-最近更新说明"><a href="#gradle-最近更新说明" class="headerlink" title="gradle 最近更新说明"></a>gradle 最近更新说明</h2><p><a href="https://docs.gradle.org/current/release-notes.html" target="_blank" rel="noopener">https://docs.gradle.org/current/release-notes.html</a></p><h2 id="gradle-归档地址"><a href="#gradle-归档地址" class="headerlink" title="gradle 归档地址"></a>gradle 归档地址</h2><p><a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a></p><h2 id="gradle-中文地址"><a href="#gradle-中文地址" class="headerlink" title="gradle 中文地址"></a>gradle 中文地址</h2><p><a href="https://dongchuan.gitbooks.io/gradle-user-guide-/" target="_blank" rel="noopener">https://dongchuan.gitbooks.io/gradle-user-guide-/</a></p><h2 id="gradle-DSL"><a href="#gradle-DSL" class="headerlink" title="gradle  DSL"></a>gradle  DSL</h2><p><a href="https://docs.gradle.org/current/dsl/" target="_blank" rel="noopener">https://docs.gradle.org/current/dsl/</a></p><h2 id="gradle-youtube-更新视频介绍"><a href="#gradle-youtube-更新视频介绍" class="headerlink" title="gradle youtube 更新视频介绍"></a>gradle youtube 更新视频介绍</h2><p><a href="https://www.youtube.com/channel/UCvClhveoEjokKIuBAsSjEwQ" target="_blank" rel="noopener">https://www.youtube.com/channel/UCvClhveoEjokKIuBAsSjEwQ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android-Studio下载归档地址&quot;&gt;&lt;a href=&quot;#Android-Studio下载归档地址&quot; class=&quot;headerlink&quot; title=&quot;Android Studio下载归档地址&quot;&gt;&lt;/a&gt;Android Studio下载归档地址&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django 删除表遇到的一些错误</title>
    <link href="http://gdky005.com/2017/10/18/Django-%E5%88%A0%E9%99%A4%E8%A1%A8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/"/>
    <id>http://gdky005.com/2017/10/18/Django-删除表遇到的一些错误/</id>
    <published>2017-10-18T03:36:13.000Z</published>
    <updated>2017-10-18T03:37:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>python manage.py sqlmigrate DouYin 0001  </p><p>逗比的 Django, 从数据库删除以后，就无法再次创建数据库成功。折腾了好久，终于摸索出一条路。 删除你不需要的代码和 服务器端的 数据库，然后本地依旧执行一次</p><pre><code>python manage.py makemigrations         python manage.py migrate      </code></pre><p>，然后使用这个命令：<br>    python manage.py sqlmigrate 【你的 Modle 名称】 0001 </p><p>就能看到一个 Sql 语句，把这个语句在服务器端执行一下就可以了，等同于在服务器端创建了新的数据表，然后使用 Django 的表中的数据就正常了，可以正常删除添加操作。<br>如果遇到  新加了字段总是报错，可以给新加的这个字段添加 默认值，然后执行就 Ok 了。<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/django-error/django-delete_error-1.png" alt=""></p><h3 id="自动增长和主键只有一个生效了"><a href="#自动增长和主键只有一个生效了" class="headerlink" title="自动增长和主键只有一个生效了"></a>自动增长和主键只有一个生效了</h3><p><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/django-error/django-delete_error-2.png" alt=""><br>上面的这种方法不行的哦！<br>具体的解决办法是：<br><img src="https://raw.githubusercontent.com/gdky005/PictureResource/master/django-error/django-delete_error-3.png" alt=""></p><h3 id="删除以后就无法再次创建成功，what"><a href="#删除以后就无法再次创建成功，what" class="headerlink" title="删除以后就无法再次创建成功，what?"></a>删除以后就无法再次创建成功，what?</h3><pre><code>python manage.py makemigrations app</code></pre><p>app 表示你的 Module  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python manage.py sqlmigrate DouYin 0001  &lt;/p&gt;
&lt;p&gt;逗比的 Django, 从数据库删除以后，就无法再次创建数据库成功。折腾了好久，终于摸索出一条路。 删除你不需要的代码和 服务器端的 数据库，然后本地依旧执行一次&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="django, 删除表" scheme="http://gdky005.com/tags/django-%E5%88%A0%E9%99%A4%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>打造一个高逼格的android开源项目——小白全攻略</title>
    <link href="http://gdky005.com/2017/06/15/%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%B0%8F%E7%99%BD%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>http://gdky005.com/2017/06/15/打造一个高逼格的android开源项目——小白全攻略/</id>
    <published>2017-06-15T10:34:29.000Z</published>
    <updated>2017-06-22T03:13:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小引子"><a href="#小引子" class="headerlink" title="小引子"></a>小引子</h3><p>在平时的开发过程中，我们经常会查阅很多的资料，最常参考的是 github 的开源项目。通常在项目的主页面能看到项目的简介和基本使用，并且时不时能看到页面汇中有好多的彩色标签，看起来很酷，很专业，很有逼格，能提升很多的好感度。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文又是一篇很长的文章，如之前写的某篇文章一样，基本是一口气连续两三天的写。写啊写啊写，不知不觉就写了好多，其实有很多是素材图片，务必做到每个细节我都实践一遍。</p><p>考虑到同学们的时间有限，各取所需，所以按照我的惯例，首先有一篇完整版，其次，有一篇缩略版。可是这次缩略版不好做，所以综合考虑，把每个单独的知识点拆分出来，抓住重点，尽量让大家看的开心。</p><p><strong>这里需要提醒的是：</strong></p><p><em>看了完整版就不用看精简集合了，内容都一样。完整版具有一定的连贯性。</em><br><em>精简版就看的清爽哈，以备自己玩的时候，快速查找相关资料和步骤。</em></p><p>这里优先汇总下：</p><h3 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h3><p>完整版：<br><a href="http://www.gdky005.com/2017/06/15/%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%B0%8F%E7%99%BD%E5%85%A8%E6%94%BB%E7%95%A5/" target="_blank" rel="noopener">打造一个高逼格的android开源项目——小白全攻略</a></p><p>精简集合版：<br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%971%EF%BC%9A-Top-30-android-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%BE%BD%E7%AB%A0/" target="_blank" rel="noopener">徽章系列1： Top 30 android 开源项目徽章</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%972%EF%BC%9AJitPack-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列2：JitPack 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%973%EF%BC%9A-Travis-CI-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列3： Travis CI 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%974%EF%BC%9A-Circle-CI-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列4： Circle CI 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%975%EF%BC%9A-Codecov-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列5： Codecov 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%976%EF%BC%9A-Api-Level-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列6： Api_Level 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%977%EF%BC%9A-codacy-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列7： codacy 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%978%EF%BC%9A%E7%94%9F%E6%88%90%E4%B8%AA%E6%80%A7%E5%BE%BD%E7%AB%A0/" target="_blank" rel="noopener">徽章系列8：生成个性徽章</a></p><p>总分类：<br><a href="http://www.gdky005.com/categories/shields/" target="_blank" rel="noopener">徽章（shields ）系列文章总分类</a></p><p>github 地址：<br><a href="https://github.com/gdky005/AndroidBadge" target="_blank" rel="noopener">徽章项目 Demo github 地址：</a><br> <a href="https://github.com/gdky005/AndroidBadge" target="_blank" rel="noopener">https://github.com/gdky005/AndroidBadge</a></p><p><strong>下面正文，正式开始。</strong></p><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><p>我们以最流行的 android 开源项目 <a href="https://github.com/PhilJay/MPAndroidChart" title="MPAndroidChart" target="_blank" rel="noopener">MPAndroidChart</a> 为例来看看。</p><p><a href="#"><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-0.png" alt=""></a></p><ol><li>前两个蓝色的标签：开始两个蓝色的标签是开源项目主要贡献者 Twitter 的联系方式，点击后可以跳入到 Twitter 的主页，查看该大神的 动态。</li><li>橘色的标签：是国外比较有名的 开源项目网站 <a href="https://android-arsenal.com" target="_blank" rel="noopener">android-arsenal</a>， 很多开源项目都会在这里找到，有该项目的详细介绍。包含组员，版本号，github 项目基础信息等等。点击后会进入 MPAndroidChart 项目的首页，能看到有好多想知道的，不想知道的各种信息。</li><li>release蓝色的标签： 点击后能进入到比较有名的 <a href="https://jitpack.io/#PhilJay/MPAndroidChart" target="_blank" rel="noopener">jitpack.io</a> 对应的MPAndroidChart 页面，直接获取 MPAndroidChart 的最新版本，也能看到之前的构建历史。下面会重点介绍 jitpack.io 的使用。</li><li>绿色的标签： 这个比较有意思，是 当前想支持的最低版本，MPAndroidChart的最低版本是 api-8。 点击后会进入到Android 2.2–2.2.3 Froyo (API level 8) 的详细介绍。这个功能是 android-arsenal 专门提供 开发者使用的。 下面也会有所介绍。</li></ol><p>下面我们将 这些标签称之为 徽章 （<a href="https://shields.io/" target="_blank" rel="noopener">shields</a>）。</p><h3 id="Top-30-android-开源项目徽章"><a href="#Top-30-android-开源项目徽章" class="headerlink" title="Top 30 android 开源项目徽章"></a>Top 30 android 开源项目徽章</h3><p>我们尝试在 github 里面搜索 以 android  关键字 开发语言为 java 的开源项目。<br><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-1.png" alt=""><br>统计情况如下：</p><ol><li>Retrofit 0</li><li>okhttp 0</li><li>Butter Knife 0</li><li>MPAndroidChart 4 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-2.png" alt=""></li><li>Android-Universal-Image-Loader 2 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-3.png" alt=""></li><li>glide 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-4.png" alt=""></li><li>leakcanary 0 </li><li>EventBus 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-5.png" alt=""></li><li>picasso 0 </li><li>zxing 3 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-6.png" alt=""></li><li>iosched 0</li><li>Fresco 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-7.png" alt=""></li><li>lottie-android 0</li><li>RxAndroid 3 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-8.png" alt=""></li><li>libgdx 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-9.png" alt=""></li><li>SlidingMenu 0</li><li>PhotoView 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-10.png" alt=""></li><li>android-async-http 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-11.png" alt=""></li><li>material-dialogs 5 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-12.png" alt=""></li><li>AndroidUtilCode 0</li><li>androidannotations 3 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-13.png" alt=""></li><li>Material-Animations 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-14.png" alt=""></li><li>fastjson 5 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-15.png" alt=""></li><li>ViewPagerIndicator 0 </li><li>plaid 0 </li><li>PocketHub 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-16.png" alt=""></li><li>tinker 4 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-17.png" alt=""></li><li>Android-CleanArchitecture 2  <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-18.png" alt=""> <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-19.png" alt=""></li><li>Android-PullToRefresh 0 </li><li>MaterialDesignLibrary 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-20.png" alt=""></li></ol><p>我们是筛选容器就是 30个，统计日期：2017年04月27日（随着时间推移，可能略微有变动）。使用标签的有 18个，未使用的有12个。 使用概率大约是：60%。如果筛选容器的范围再大一点可能更多，没有使用徽章的12个项目，可能由于历史原因，或者个人原因未使用，但是不管怎么说，使用徽章的人会越来越多。</p><h3 id="为什么要使用徽章？"><a href="#为什么要使用徽章？" class="headerlink" title="为什么要使用徽章？"></a>为什么要使用徽章？</h3><p>徽章 <a href="https://github.com/badges/shields" target="_blank" rel="noopener">shields</a></p><p>徽章的使用不仅仅是为了装 B，而是为了让开源想更高效。进入项目主页一眼能看出需要的东西，例如该项目能否编译通过，当前最新的版本是什么等。</p><p>徽章能突出视野，github 默认给我们展示的是黑白世界，但是通过 徽章，将会得到改变。重要的信息可以一目了然。</p><h3 id="最常用徽章有哪些？"><a href="#最常用徽章有哪些？" class="headerlink" title="最常用徽章有哪些？"></a>最常用徽章有哪些？</h3><p>一份不太靠谱的标准，不过你应该掌握:<br><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-21.png" alt=""><br>（PS: 上图中的图标顺序对应下面的顺序）</p><ol><li>jitpack 徽章：<a href="https://jitpack.io" target="_blank" rel="noopener">JitPack</a> 是一个仓库，类似 maven，binary, 主要是帮我们生产 android 项目的 aar or jar 的平台。基于 GitHub，可以很方便将 library 发布到远程，然后可以用 gradle 依赖到任何一个项目中。</li><li>travis-ci 徽章：<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis-CI</a> 是一个线托管的CI服务，不需要自己搭服务器，在网页上点几下就好，用起来更方便。最重要的是，它对开源项目是免费的。</li><li>circle-ci 徽章：<a href="https://circleci.com/" target="_blank" rel="noopener">Cricle-CI</a> 是也一个线托管的CI服务，和上面相同，不过这个相对来说比较好用一些，可以 SSH 到测试容器，方便在出问题的时候上去调试找原因，界面相对好看一些。</li><li>codecov 徽章：<a href="https://codecov.io" target="_blank" rel="noopener">Codecov</a> 是开源的测试结果展示平台，将测试结果可视化。Github上许多开源项目都使用了Codecov来展示单测结果。</li><li>api level 徽章：<a href="https://android-arsenal.com/api" target="_blank" rel="noopener">Api-Leavel</a> 是 android-arsenal 网站提供的 android api 展示的徽章。可以在项目主页中直接使用 badge 的内容。 </li><li>codacy 徽章：编程代码自动审查服务平台。帮助开发者及时发现代码中的 bug，提升软件运行质量，主要包括代码质量、语法规范、功能可用性方面的检查。</li><li>个人专属 徽章：<a href="https://shields.io/" target="_blank" rel="noopener">shiedls</a> 根据自己的需求可以定制很多样式的徽章，全凭个人 爱好，怎么开心怎么玩。</li></ol><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>这里我用一个简单的 android 项目来做一个说明，其他语言也是可以的，这里仅仅展示一个实例。</p><p>我的本机的android环境说明如下：</p><ul><li>Mac</li><li>Android Studio 2.4 preview 4</li><li>gradle: 3.4.1</li><li>java: 1.8.0_73</li><li>buildToolsVersion: 25.0.2</li><li>compileSdkVersion: 25</li><li>minSdkVersion: 14</li><li>support: appcompat-v7:25.1.0</li><li>constraint: constraint-layout:1.0.0-beta4</li><li>classpath: com.android.tools.build:gradle:2.4.0-alpha4</li></ul><p>用其他版本或者环境也是可以的, 这里只是说明。 如果任何遇到问题，可以在我的博客里面留言，联系详情为：<a href="http://www.gdky005.com/about/" target="_blank" rel="noopener">http://www.gdky005.com/about/</a> 因为该文的完整版真的很长，涉及到很多的技术，所以专门设立了 QQ群：621094999， 有疑问或非常感兴趣的同学，可以来次探讨，也许一些新功能就是你们发觉的呢。 （PS：本应该在文末尾添加联系方式的，但是无奈，很多网站都有爬虫系统，好不容易写的文章就被爬走了，导致很多小伙伴遇到问题后，各种留言，但是我就是看不到，所以这次采取特殊方式，见谅哈）</p><h3 id="JitPack-的使用"><a href="#JitPack-的使用" class="headerlink" title="JitPack 的使用"></a>JitPack 的使用</h3><p>官网： <a href="https://jitpack.io" target="_blank" rel="noopener">https://jitpack.io</a></p><h5 id="创建-Android-Library"><a href="#创建-Android-Library" class="headerlink" title="创建 Android Library"></a>创建 Android Library</h5><ol><li>在 AS 中创建标准的 android 项目：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-22.png" alt=""></li><li>创建 Library：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-23.png" alt=""> <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-24.png" alt=""> <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-25.png" alt=""></li><li>创建 badge library 成功。<h5 id="配置相关文件"><a href="#配置相关文件" class="headerlink" title="配置相关文件"></a>配置相关文件</h5>进入 <a href="https://jitpack.io/docs/ANDROID/" target="_blank" rel="noopener">jitpack android</a> 可以看到 jitpack 为我们提供的文档帮助。  <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-26.png" alt=""></li><li>在项目的根目录下的 build.gradle 文件中添加：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-27.png" alt=""></li><li>在 library 下的 build.gradle 中添加：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-28.png" alt=""> ， 对应官网中说的 『group=’com.github.YourUsername’』， 其实可以不写，写不写都会自动生成。 即使你写成了别的，最终还是以这样的格式输出。</li></ol><p>AndroidBadge 中 的 build.gradle :</p><pre><code>classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.5&apos; // Add this line</code></pre><p>AndroidBadge 里面的 badge (library) :</p><pre><code>apply plugin: &apos;com.github.dcendents.android-maven&apos;</code></pre><h5 id="发布到-Github-（这里直接展示-AS-中的界面图形操作，会命令行的同学随意）"><a href="#发布到-Github-（这里直接展示-AS-中的界面图形操作，会命令行的同学随意）" class="headerlink" title="发布到 Github （这里直接展示 AS 中的界面图形操作，会命令行的同学随意）"></a>发布到 Github （这里直接展示 AS 中的界面图形操作，会命令行的同学随意）</h5><ol><li>登录自己的 github 账号，然后创建一个 项目，在首页右边能看到：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-29.png" alt=""></li><li>点击 大绿色 按钮，并填写信息：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-30.png" alt="">。 那个协议，你们随意，这里只是演示。</li><li>创建成功后：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-31.png" alt="">，拷贝当前项目地址。</li><li>在 AS 的项目中创建 git 仓库：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-32.png" alt="">， 点击后，直接 选择 ok。将项目添加到 git 管理<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-33.png" alt="">。 项目中的文件都变成绿色后：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-34.png" alt="">，耐心等待完成后， 本地项目已经被 git 管理起来了，然后把代码提交到 github 即可。可能会有冲突，自行解决即可。</li><li>现在我们给 library 的 badge 项目添加一个工具类：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-35.png" alt="">， 并提交到 github。</li></ol><h5 id="Github-打-release-or-tag"><a href="#Github-打-release-or-tag" class="headerlink" title="Github 打 release or tag"></a>Github 打 release or tag</h5><p><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-36.png" alt=""> <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-37.png" alt=""><br>创建第一个 release 分支：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-38.png" alt=""><br>发布成功以后就能看到: <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-39.png" alt=""></p><p>一般用 release 就可以了， 在适当的时候 用  tag。</p><h5 id="在-JitPack-上生成-aar"><a href="#在-JitPack-上生成-aar" class="headerlink" title="在 JitPack 上生成 aar"></a>在 JitPack 上生成 aar</h5><ol><li>进入 <a href="https://jitpack.io/" target="_blank" rel="noopener">https://jitpack.io/</a>。</li><li>将 github 的项目地址： <a href="https://github.com/gdky005/AndroidBadge" target="_blank" rel="noopener">https://github.com/gdky005/AndroidBadge</a>， 直接拷贝 到 jitpack 网页中的文本框中。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-40.png" alt=""></li><li>点击 Look Up 后：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-41.png" alt="">， 等里面的那个圈圈 转完 以后，出现 绿色的这个：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-42.png" alt=""> 说明已经发布 aar 成功，那么我们 可以直接使用了。 如果点开这个东西，会看到编译的和发布的过程。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-43.png" alt=""> </li><li>如果是红色的，说明有错误，点开查看，修改后重新构建。</li></ol><h5 id="在-app-Demo-中测试是否生效"><a href="#在-app-Demo-中测试是否生效" class="headerlink" title="在 app Demo 中测试是否生效"></a>在 app Demo 中测试是否生效</h5><p>点击 get 后，能看到： <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-44.png" alt=""></p><ol><li>给项目根目录下的 build.gradle 添加：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-45.png" alt=""></li><li>给app 项目里面的 build.gradle 添加：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-46.png" alt=""></li></ol><p>AndroidBadge 中 的 build.gradle :</p><pre><code>maven { url &apos;https://jitpack.io&apos; }</code></pre><p>AndroidBadge 里面的 app 的 build.gradle :</p><pre><code>compile &apos;com.github.gdky005:AndroidBadge:v1.0.0&apos;</code></pre><p>好的，现在我们已经添加成功了，在 MainActivity 里面是是吧，看能否调到之前在 library 里面的写的 Utils.getVersion()。很高兴的是我们调出来了：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-47.png" alt=""><br>在项目的最底下也能看到： <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-48.png" alt="">。 运行 app 项目：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-49.png" alt=""></p><h5 id="问题来了，我们修改library-后也能调用到吗？"><a href="#问题来了，我们修改library-后也能调用到吗？" class="headerlink" title="问题来了，我们修改library 后也能调用到吗？"></a>问题来了，我们修改library 后也能调用到吗？</h5><p>让咱们一起试试吧：</p><ol><li>修改 badge 项目中的 1.0.0 为  1.0.1 ： <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-50.png" alt="">。</li><li>提交代码后，push 到 github。 提交成功以后，我们重复上面的打 release 步骤 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-51.png" alt="">, <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-52.png" alt="">, <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-53.png" alt=""></li><li>然后再去 jitpack 上看看：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-54.png" alt=""> 多了一个 v1.0.1, 点击 get 吧。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-55.png" alt=""> <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-56.png" alt=""> <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-57.png" alt=""></li><li>发布成功后，我们去 app 里面试试。 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-58.png" alt=""></li><li>同步后，直接运行 app。非常好，我们的修改的东西已经变了：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-59.png" alt="">。</li></ol><p>至此， jitpack 基本也差不多了，但是貌似缺少了最重要的一点吧。</p><h5 id="jitpack-的徽章怎么弄"><a href="#jitpack-的徽章怎么弄" class="headerlink" title="jitpack 的徽章怎么弄"></a>jitpack 的徽章怎么弄</h5><p>还是在刚刚的 jitpack 界面，只是我们把 页面拉倒底部。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-60.png" alt=""> 点击后：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-61.png" alt=""> 是不是看到了熟悉的 md 文档的格式呢？ 看不懂也没关系，下面会专门讲解。</p><ol><li>拷贝内容：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-62.png" alt=""></li><li>打开 github 的 AndroidBridge 项目：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-63.png" alt="">，点击该文件。</li><li>让我们在线编辑下： <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-64.png" alt=""></li><li>给 github 中的 这个 readme.md 文件添加点东西吧。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-65.png" alt=""></li><li>让我们 保存下。 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-66.png" alt=""></li><li>然后回到项目<a href="https://github.com/gdky005/AndroidBadge" target="_blank" rel="noopener">首页</a>看看：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-67.png" alt=""> 棒棒的，添加成功。</li></ol><h3 id="Travis-CI-的使用"><a href="#Travis-CI-的使用" class="headerlink" title="Travis CI 的使用"></a>Travis CI 的使用</h3><p>官网： <a href="http://travis-ci.org/" target="_blank" rel="noopener">http://travis-ci.org/</a><br>ps: 这个是公开的，如果需要使用私有的，请使用 .com 域名。<br>需要提醒的是：每次提交代码后都会重新下载需要的资源文件哦，所以时间很长，耐心等待吧。</p><h5 id="TravisCI-有什么用？"><a href="#TravisCI-有什么用？" class="headerlink" title="TravisCI 有什么用？"></a>TravisCI 有什么用？</h5><p>travis-ci 就是 自动化 CI 工具，类似于大公司经常使用的 Jenkins，但是 travis-ci 是在云端的，而是支持 github, 还免费，我们可以 用 travis-ci 做很多的事情，不仅仅是 编译看 项目有没有问题。例如在项目构建结束以后，我们可以打包，并发布 apk 到都 蒲公英， fir，也可以用邮件通知给相关的开发人员和业务任务。 做一些简单处理，轻轻松松。这部分内容到后面尽快整理，在写一篇。</p><h5 id="添加-github-项目到-travis-ci"><a href="#添加-github-项目到-travis-ci" class="headerlink" title="添加 github 项目到 travis-ci"></a>添加 github 项目到 travis-ci</h5><ol><li>进入 Travis 官网后，使用 GitHub 账号 登录，成功后：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-68.png" alt="">。</li><li>点击 加号 ，能看到你 GitHub 里面的所有：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-69.png" alt="">， 如果没有项目或者没有你新建的项目，请点击右上方的   Sync account  按钮。</li><li>点击这里：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-70.png" alt="">，开启 Travis 构建。点击这个可以配置该项目：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-71.png" alt=""></li><li>默认是空的：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-72.png" alt=""></li></ol><h5 id="在-项目中添加-travis-ci-需要的-travis-yml-文件"><a href="#在-项目中添加-travis-ci-需要的-travis-yml-文件" class="headerlink" title="在 项目中添加 travis-ci 需要的 .travis.yml 文件"></a>在 项目中添加 travis-ci 需要的 .travis.yml 文件</h5><ol><li>在项目根目录下直接创建 一个 .travis.yml 的文件。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-73.png" alt=""></li><li>直接在文件里面添加代码：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-74.png" alt=""></li></ol><p><strong>.travis.yml 文件 源代码</strong></p><pre><code>language: androidjdk: oraclejdk8sudo: falseandroid:  components:    - tools    - build-tools-25.0.2    - android-25    - extra-android-m2repository    - extra-android-support  licenses:      - android-sdk-license-.+      - &apos;.+&apos;before_install:  - chmod +x gradlew  - mkdir &quot;$ANDROID_HOME/licenses&quot; || true  - echo -e &quot;\n8933bad161af4178b1185d1a37fbf41ea5269c55&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-license&quot;  - echo -e &quot;\n84831b9409646a918e30573bab4c9c91346d8abd&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-preview-license&quot;script:  - ./gradlew assembleRelease</code></pre><p>因为该文很长很长，所以暂时就不解释具体含义了，可以看看官方文档。</p><h5 id="push-项目到-github-travis-ci-自动监测构建"><a href="#push-项目到-github-travis-ci-自动监测构建" class="headerlink" title="push 项目到 github, travis-ci 自动监测构建"></a>push 项目到 github, travis-ci 自动监测构建</h5><ol><li>提交到代码，并 push 到 github。会自动触发 Travis 的自动构建。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-75.png" alt=""></li><li>下面黑色部分是构建的过程：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-76.png" alt="">，  黑框上的白色点点点击后会变成绿色，会自动滚动到最下面。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-77.png" alt=""></li></ol><p>喝一杯咖啡，慢慢等待吧，最难熬的时候已经过去，此刻是享受的时候了。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-78.png" alt=""></p><p>回到首页刷新后，能看到：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-79.png" alt=""> 说明我们已经构建成功了。</p><h5 id="travis-yml-需要注意的地方"><a href="#travis-yml-需要注意的地方" class="headerlink" title=".travis.yml 需要注意的地方"></a>.travis.yml 需要注意的地方</h5><p>初次使用  Travis 的试试，总遇到 说 android 的一些协议未接受而构建失败，导致耗费了一两天，曾经一度想放弃，但是最终坚持了下来，通过各种搜索，摸索，猜测，终于搞定。其实最初的项目是这个：<a href="https://github.com/gdky005/TestJitpack" target="_blank" rel="noopener">https://github.com/gdky005/TestJitpack</a> ，里面有很多辛酸史记录，从提交记录能看得出来，有兴趣的可以研究研究，也许能解决你现在的问题。</p><p>Travis CI 协议问题解决方法：<a href="http://stackoverflow.com/questions/37615379/travis-ci-build-doesnt-work-with-android-constraint-layout" target="_blank" rel="noopener">http://stackoverflow.com/questions/37615379/travis-ci-build-doesnt-work-with-android-constraint-layout</a></p><p>最重要部分在这里：</p><pre><code>machine:  environment:      ANDROID_HOME: /usr/local/android-sdk-linuxdependencies:  pre:    - mkdir -p &quot;$ANDROID_HOME/licenses&quot;    - echo -e &quot;\n8933bad161af4178b1185d1a37fbf41ea5269c55&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-license&quot;    - echo -e &quot;\n84831b9409646a918e30573bab4c9c91346d8abd&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-preview-license&quot;</code></pre><h5 id="添加-travis-ci-徽章到-github"><a href="#添加-travis-ci-徽章到-github" class="headerlink" title="添加 travis-ci 徽章到 github"></a>添加 travis-ci 徽章到 github</h5><p>激动的时刻再次到来，让我们找找徽章在哪里呢？<br><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-80.png" alt=""></p><p>让我们来选择 markdonw 格式：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-81.png" alt=""> 并复制上。</p><p>同样如上修改 readme.md。 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-82.png" alt=""></p><p>加空格后，直接贴上去：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-83.png" alt="">，这里需要说明的是，如果换成，图标也会换行哦。这样写就能保证所有的图标在一行了。</p><p>回到项目首页以后就能发现：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-84.png" alt=""></p><p>添加 Travis 徽章成功。</p><p>Bye the way! 上面是最初级的构建过程，如果遇到单元测试就不行了，还得参考 我的开源项目 <a href="https://github.com/gdky005/TestJitpack" target="_blank" rel="noopener">TestJitpack</a>。 不过有点乱，后面整理下。</p><h3 id="Circle-CI-的使用"><a href="#Circle-CI-的使用" class="headerlink" title="Circle CI 的使用"></a>Circle CI 的使用</h3><p> 官网: <a href="https://circleci.com/" target="_blank" rel="noopener">https://circleci.com/</a></p><h5 id="Circle-CI-和-Travis-CI-有什么区别？需要一起使用吗？"><a href="#Circle-CI-和-Travis-CI-有什么区别？需要一起使用吗？" class="headerlink" title="Circle CI 和 Travis CI 有什么区别？需要一起使用吗？"></a>Circle CI 和 Travis CI 有什么区别？需要一起使用吗？</h5><p>Circle CI 相对来说比 Travis CI 好一些，至少界面上来说哈。还提供 ssh 的连接，构建过程相对来说 比较透明直观。例如：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-85.png" alt=""></p><p>Travis CI 的文档资料相对 Circle CI 来说 比较多， Circle CI 资料少之又少。</p><p>Travis CI 的使用率还是很高的， 不过 Circle CI 相对来说比较 年轻化，符合主流的科技感，更智能。</p><p>说到是否需要一起使用，其实都行，不过我在观察 github 主流项目的时候 有不少项目都是同时使用的，多一个技能总没有坏处吧。其实会了 Travis CI，在加 Circle CI 真是简单不少呢，只是基本语法不太一样。</p><h5 id="添加项目到-Circle-CI"><a href="#添加项目到-Circle-CI" class="headerlink" title="添加项目到 Circle CI"></a>添加项目到 Circle CI</h5><ol><li>登录主页面：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-86.png" alt="">， 在 project 里面自己的账号下搜索刚创建的项目。</li><li>一般直接选择 Ubuntu 即可:<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-87.png" alt="">,点击绿色  Build project.<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-88.png" alt=""></li><li>能看到：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-89.png" alt="">， 但是这次肯定会失败，因为我们还没有添加 Circle 需要的文件呢。</li></ol><h5 id="在-项目中添加-Circle-CI-需要的-circle-yml-文件"><a href="#在-项目中添加-Circle-CI-需要的-circle-yml-文件" class="headerlink" title="在 项目中添加 Circle CI 需要的 circle.yml 文件"></a>在 项目中添加 Circle CI 需要的 circle.yml 文件</h5><ol><li>在项目的根目录下 添加 circle.yml 文件；</li><li>添加 circle 的代码到文件中：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-90.png" alt=""></li></ol><p><strong>circle.yml 源代码：</strong></p><pre><code>machine:  java:      version: oraclejdk8  environment:      ANDROID_HOME: /usr/local/android-sdk-linuxdependencies:  pre:    - mkdir -p &quot;$ANDROID_HOME/licenses&quot;    - echo -e &quot;\n8933bad161af4178b1185d1a37fbf41ea5269c55&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-license&quot;    - echo -e &quot;\n84831b9409646a918e30573bab4c9c91346d8abd&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-preview-license&quot;  override:    - echo y | android update sdk --no-ui --filter &quot;android-25&quot;    - echo y | android update sdk --no-ui --filter &quot;build-tools-25.0.2&quot;    - echo y | android update sdk --no-ui --filter &quot;extra-android-m2repository&quot;    - echo y | android update sdk --no-ui --filter &quot;extra-android-support&quot;    - echo y | android update sdk --no-ui --filter &quot;extra-google-m2repositor&quot;    - ./gradlew dependencies || truetest:  override:    - ./gradlew build</code></pre><h5 id="push-项目到-github-Circle-CI-自动监测构建"><a href="#push-项目到-github-Circle-CI-自动监测构建" class="headerlink" title="push 项目到 github, Circle CI 自动监测构建"></a>push 项目到 github, Circle CI 自动监测构建</h5><ol><li>提交代码后，发布到 github，Circle CI 会自动执行。</li><li><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-91.png" alt=""> 点击进来后，会看到：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-92.png" alt="">， 说明已经开始 构建了， 下载需要的东西：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-93.png" alt="">。</li><li>构建中的一些步骤：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-94.png" alt="">， 相对 Travis 来说展示更直观。</li><li>看到 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-95.png" alt=""> 说明构建成功。</li></ol><h5 id="添加-Circle-CI-徽章到-github"><a href="#添加-Circle-CI-徽章到-github" class="headerlink" title="添加 Circle CI 徽章到 github"></a>添加 Circle CI 徽章到 github</h5><p>我们再来把 Circle CI 的徽章找到，并添加到我们的 github 上去吧。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-96.png" alt=""><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-97.png" alt=""></p><p>我们把 徽章的 markdown 链接拷贝下来放入到我们的 主项目页面的里面。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-98.png" alt=""></p><p>回项目主页刷新后：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-99.png" alt=""> 非常 happy, 已经添加成功了。</p><h3 id="接下来添加什么呢？"><a href="#接下来添加什么呢？" class="headerlink" title="接下来添加什么呢？"></a>接下来添加什么呢？</h3><p>Github上许多开源项目都使用了Codecov来展示单元测试结果， 就它了。</p><h3 id="Codecov-的使用"><a href="#Codecov-的使用" class="headerlink" title="Codecov 的使用"></a>Codecov 的使用</h3><p>根据文中的指示：我们能看到一个开源的 github 项目 <a href="https://github.com/codecov/example-android" target="_blank" rel="noopener">https://github.com/codecov/example-android</a>， 不过看起来点晕晕的，于是摸索了一段时间。</p><p>我们之后都直接使用 Trivas CI 构建了。</p><p>添加项目就不说了，进入后，点击 project changes, 找到自己的项目：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-100.png" alt="">，等生产报告后，进入该网站就能看见结果。</p><h5 id="利用-Jacoco-生成报告"><a href="#利用-Jacoco-生成报告" class="headerlink" title="利用 Jacoco 生成报告"></a>利用 Jacoco 生成报告</h5><p>Codecov不支持自己生成Android的测试覆盖率报告，它能做的是接收Jacoco生成的报告并进行可视化</p><p>1） 在 app 的 build.gradle 文件中 添加依赖</p><pre><code>    //Jacoco 生成报告的依赖androidTestCompile(&apos;com.android.support.test:runner:0.5&apos;, {    exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;})// Set this dependency to use JUnit 4 rulesandroidTestCompile(&apos;com.android.support.test:rules:0.5&apos;, {    exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;})// Espresso-contrib for DatePicker, RecyclerView, Drawer actions, Accessibility checks, CountingIdlingResourceandroidTestCompile(&apos;com.android.support.test.espresso:espresso-contrib:2.2.2&apos;, {    exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;    exclude group: &apos;com.android.support&apos;, module: &apos;support-v4&apos;    exclude group: &apos;com.android.support&apos;, module: &apos;appcompat-v7&apos;    exclude group: &apos;com.android.support&apos;, module: &apos;design&apos;    exclude group: &apos;com.android.support&apos;, module: &apos;recyclerview-v7&apos;})androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, {    exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;})</code></pre><p>2) 在 需要构建测试覆盖率报告的Module  （AndroidBadge 项目中的 app）  的gradle文件中设置。 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-101.png" alt=""></p><pre><code>debug{        testCoverageEnabled true}</code></pre><p>3) 可以在尝试在本地生成报告：</p><pre><code>./gradlew :app:createDebugAndroidTestCoverageReport 生成测试报告。  app 就是咱们项目中要测试的 module</code></pre><p>测试报告地址：app/build/reports/coverage/debug/index.html。 </p><h5 id="上报数据给-Codecov"><a href="#上报数据给-Codecov" class="headerlink" title="上报数据给 Codecov"></a>上报数据给 Codecov</h5><ol><li>使用Github账号登录 <a href="https://codecov.io/，" target="_blank" rel="noopener">https://codecov.io/，</a> 并提供授权给该应用。</li><li><p>在.travis.yml文件中添加命令将测试覆盖率报告上传给Codecov。</p><p> after_success:</p><pre><code>- bash &lt;(curl -s https://codecov.io/bash)</code></pre></li></ol><p><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-102.png" alt=""></p><h5 id="Codecov-需要用到-单元测试，所以必须要在-配置文件中添加模拟器"><a href="#Codecov-需要用到-单元测试，所以必须要在-配置文件中添加模拟器" class="headerlink" title="Codecov 需要用到 单元测试，所以必须要在 配置文件中添加模拟器"></a>Codecov 需要用到 单元测试，所以必须要在 配置文件中添加模拟器</h5><p>因为之前修改过很多次，过程很繁琐，直接给配置文件了，相信大家一眼就能看出来。</p><p>完整的配置文件是：</p><pre><code>language: androidjdk: oraclejdk8sudo: falseenv:  global:      - ANDROID_API_LEVEL=25      - ANDROID_BUILD_TOOLS_VERSION=25.0.2      - ANDROID_ABI=armeabi-v7a      - ANDROID_TAG=google_apis      - ADB_INSTALL_TIMEOUT=20 # minutes (2 minutes by default)android:  components:    - platform-tools    - tools # to install Android SDK tools 25.1.x    - build-tools-$ANDROID_BUILD_TOOLS_VERSION    - android-$ANDROID_API_LEVEL    - sys-img-armeabi-v7a-google_apis-$ANDROID_API_LEVEL  licenses:      - android-sdk-license-.+      - &apos;.+&apos;before_install:  - chmod +x gradlew  - mkdir &quot;$ANDROID_HOME/licenses&quot; || true  - echo -e &quot;\n8933bad161af4178b1185d1a37fbf41ea5269c55&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-license&quot;  - echo -e &quot;\n84831b9409646a918e30573bab4c9c91346d8abd&quot; &gt; &quot;$ANDROID_HOME/licenses/android-sdk-preview-license&quot;before_script:  # Create and start emulator  - echo no | android create avd --force -n test -t &quot;android-&quot;$ANDROID_API_LEVEL --abi $ANDROID_ABI --tag $ANDROID_TAG  - emulator -avd test -no-skin -no-window &amp;  - android-wait-for-emulator  - adb shell input keyevent 82 &amp;script:  - ./gradlew assembleRelease  - ./gradlew :app:createDebugAndroidTestCoverageReport --info --stacktraceafter_success:  - bash &lt;(curl -s https://codecov.io/bash)</code></pre><h5 id="codecov-总结"><a href="#codecov-总结" class="headerlink" title="codecov 总结"></a>codecov 总结</h5><p>Travis-CI 对 android 的单元测试支持不是很好，因为需要开启虚拟机，开启这个过程就得10分钟（我的测试时间），很耗费时间。有时候也连接不上，一次跑下来估计得个 20分钟左右吧。所以，稳定性确实不是很高。如果不做单元测试，而只是做发布之类的，稳定性还是高的。 </p><p>单元测试应都会吧， 这里检测的标准就是说 每个类和方法都必须检测到，否则就算没有覆盖。我这里也就简单在项目中写过例子，剩下的你们自己玩吧。 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-103.png" alt=""></p><p><strong>所以 要不要使用单元测试 还是根据项目决定吧。 </strong></p><h5 id="获取-codecov-的徽章"><a href="#获取-codecov-的徽章" class="headerlink" title="获取 codecov 的徽章"></a>获取 codecov 的徽章</h5><p><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-104.png" alt=""></p><h3 id="Api-Level-的使用"><a href="#Api-Level-的使用" class="headerlink" title="Api_Level 的使用"></a>Api_Level 的使用</h3><p>让 codecov 慢慢构建吧，我们先继续。</p><p>官网：<a href="https://android-arsenal.com/api" target="_blank" rel="noopener">https://android-arsenal.com/api</a></p><h5 id="Api-Level-有什么用？"><a href="#Api-Level-有什么用？" class="headerlink" title="Api_Level 有什么用？"></a>Api_Level 有什么用？</h5><p>Api_Level 是 arsenal 网站给各位开发者的一个福利，我们的 android 开源项目一般都有一个最低的构建版本。平时我们都是在 md 文件中写上 支持版本是 14+等很多样式，但是 不够醒目，有了 Api_Level 后，打开开源项目主页就知道，最低版本是多少。 不用看文档也能明白，轻松不少。 对应的 api 的一些特性和修改也能在这里展现。</p><h5 id="Api-Level-怎么玩？"><a href="#Api-Level-怎么玩？" class="headerlink" title="Api_Level 怎么玩？"></a>Api_Level 怎么玩？</h5><p>如果你的开源项目最低支持版本是：14，那么就选择这里：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-105.png" alt=""> <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-106.png" alt=""></p><p>把这个拷贝下来，放入我们的 md 文档中吧。 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-107.png" alt=""></p><h3 id="codacy-的使用"><a href="#codacy-的使用" class="headerlink" title="codacy 的使用"></a>codacy 的使用</h3><p>官网： <a href="https://www.codacy.com" target="_blank" rel="noopener">https://www.codacy.com</a></p><h5 id="codacy-是什么？"><a href="#codacy-是什么？" class="headerlink" title="codacy 是什么？"></a>codacy 是什么？</h5><p>codacy 编程代码自动审查服务平台，可以帮我们分析存在的问题 或者说是 bug,主要包括代码质量、语法规范、功能可用性方面的检查。</p><h5 id="codacy-怎么使用？"><a href="#codacy-怎么使用？" class="headerlink" title="codacy 怎么使用？"></a>codacy 怎么使用？</h5><p>进入官网，添加自己的需要的 project。<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-108.png" alt=""></p><p>完成后，等待一段时间就好了，会给你发邮件通知，已经完成。</p><p>完成后的效果是：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-109.png" alt="">，咱们的这个项目评级是 B。</p><h5 id="codacy-徽章呢？"><a href="#codacy-徽章呢？" class="headerlink" title="codacy 徽章呢？"></a>codacy 徽章呢？</h5><p><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-110.png" alt=""></p><p>拷贝下来，手动放到 咱们的项目的 md 文档中把。比较放心一些，如果点击后面的 add badge ,会自动加到项目中，需要我们 pull request 里面处理下。</p><p>搞定。</p><h3 id="生成个性徽章"><a href="#生成个性徽章" class="headerlink" title="生成个性徽章"></a>生成个性徽章</h3><p>官网： <a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a></p><h5 id="有什么用？"><a href="#有什么用？" class="headerlink" title="有什么用？"></a>有什么用？</h5><p>彰显个人魅力，体现某种功能。例如咱们做一个跳转到我的博客的 个人徽章。</p><h5 id="怎么玩？"><a href="#怎么玩？" class="headerlink" title="怎么玩？"></a>怎么玩？</h5><p>滚动网页到最下面：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-111.png" alt=""></p><p>在对应的地方填写相应的东西（也支持中文哦）， 完成后点击后面的 Make Badge 按钮试试看。</p><p>我想我的个人图标是这种浅蓝色： <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-112.png" alt=""> ，那么我就在 color 中直接写：7AD6FD</p><p><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-113.png" alt=""> 点击生成 一个地址， 先保存下面。</p><h5 id="这个原理是什么呢？-（回答最开始的问题）"><a href="#这个原理是什么呢？-（回答最开始的问题）" class="headerlink" title="这个原理是什么呢？ （回答最开始的问题）"></a>这个原理是什么呢？ （回答最开始的问题）</h5><p>徽章的格式即是 markdown 的格式: </p><pre><code>[![A\](B)\](D)</code></pre><p>A 表示的页面中需要显示的内容， B 表示的是图片的地址，D 表示的是点击后需要跳转的链接的地址。</p><h5 id="合成我的个人专属图标吧"><a href="#合成我的个人专属图标吧" class="headerlink" title="合成我的个人专属图标吧"></a>合成我的个人专属图标吧</h5><p>图片地址是上面存下来的。 前面显示内容：作者。按照上面的规范出来的结果就是：</p><pre><code>[![作者\](https:\//img.shields.io\/badge\/%E4%BD%9C%E8%80%85-gdky005-7AD6FD.svg)\](http:\//www.gdky005.com)</code></pre><p>把这段代码 粘贴到 我们的 md 文档中，个性专属徽章就出来了，而且点击后能到我们想去的地方。</p><p><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-114.png" alt=""></p><p>很酷吧，其实还可以做很多这样的事情。</p><p>本文的 中的 项目地址是： <a href="https://github.com/gdky005/AndroidBadge" target="_blank" rel="noopener">https://github.com/gdky005/AndroidBadge</a><br>需要逐步了解项目的过程或者 根据步骤出现问题的话，可以check 对应的节点，看看代码是否不同，然后自行修改，我特意保存了该进度。如果下图中 git提交的记录：<img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-115.png" alt="">  <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-116.png" alt=""> </p><p>相信小伙伴们肯定能做出更有意思的东西，到时候记得与我和大家分享，比较有特色的，我会将你们的链接挂载到 github 项目里面。</p><p>因为该文真的很长，涉及到很多的技术，所以专门设立了 QQ群：621094999， 有需要帮助或许分享新技能的小伙伴请进入。</p><p>本文完整地址请在 <a href="http://www.gdky005.com/" target="_blank" rel="noopener">我的博客</a> 里面查看，会修复 文章存在的问题，并补充一些相关细节。针对 小伙伴们提出的问题，将在博客中修改和增加。如果大家觉得不错，并且很喜欢的话，麻烦 GitHub 中 start 下，不胜感激。</p><h3 id="最后真想说一句"><a href="#最后真想说一句" class="headerlink" title="最后真想说一句"></a>最后真想说一句</h3><p>咱们不玩虚的，玩点有技术含量的东西。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;小引子&quot;&gt;&lt;a href=&quot;#小引子&quot; class=&quot;headerlink&quot; title=&quot;小引子&quot;&gt;&lt;/a&gt;小引子&lt;/h3&gt;&lt;p&gt;在平时的开发过程中，我们经常会查阅很多的资料，最常参考的是 github 的开源项目。通常在项目的主页面能看到项目的简介和基本使用，
      
    
    </summary>
    
      <category term="shields" scheme="http://gdky005.com/categories/shields/"/>
    
    
      <category term="徽章" scheme="http://gdky005.com/tags/%E5%BE%BD%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>徽章系列1： Top 30 android 开源项目徽章</title>
    <link href="http://gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%971%EF%BC%9A-Top-30-android-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%BE%BD%E7%AB%A0/"/>
    <id>http://gdky005.com/2017/06/15/徽章系列1：-Top-30-android-开源项目徽章/</id>
    <published>2017-06-15T10:05:56.000Z</published>
    <updated>2017-06-22T03:13:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们尝试在 github 里面搜索 以 android  关键字 开发语言为 java 的开源项目。<br><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-1.png" alt=""><br>统计情况如下：</p><ol><li>Retrofit 0</li><li>okhttp 0</li><li>Butter Knife 0</li><li>MPAndroidChart 4 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-2.png" alt=""></li><li>Android-Universal-Image-Loader 2 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-3.png" alt=""></li><li>glide 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-4.png" alt=""></li><li>leakcanary 0 </li><li>EventBus 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-5.png" alt=""></li><li>picasso 0 </li><li>zxing 3 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-6.png" alt=""></li><li>iosched 0</li><li>Fresco 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-7.png" alt=""></li><li>lottie-android 0</li><li>RxAndroid 3 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-8.png" alt=""></li><li>libgdx 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-9.png" alt=""></li><li>SlidingMenu 0</li><li>PhotoView 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-10.png" alt=""></li><li>android-async-http 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-11.png" alt=""></li><li>material-dialogs 5 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-12.png" alt=""></li><li>AndroidUtilCode 0</li><li>androidannotations 3 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-13.png" alt=""></li><li>Material-Animations 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-14.png" alt=""></li><li>fastjson 5 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-15.png" alt=""></li><li>ViewPagerIndicator 0 </li><li>plaid 0 </li><li>PocketHub 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-16.png" alt=""></li><li>tinker 4 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-17.png" alt=""></li><li>Android-CleanArchitecture 2  <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-18.png" alt=""> <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-19.png" alt=""></li><li>Android-PullToRefresh 0 </li><li>MaterialDesignLibrary 1 <img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-20.png" alt=""></li></ol><p>我们是筛选容器就是 30个，统计日期：2017年04月27日（随着时间推移，可能略微有变动）。使用标签的有 18个，未使用的有12个。 使用概率大约是：60%。如果筛选容器的范围再大一点可能更多，没有使用徽章的12个项目，可能由于历史原因，或者个人原因未使用，但是不管怎么说，使用徽章的人会越来越多。</p><h3 id="为什么要使用徽章？"><a href="#为什么要使用徽章？" class="headerlink" title="为什么要使用徽章？"></a>为什么要使用徽章？</h3><p>徽章 <a href="https://github.com/badges/shields" target="_blank" rel="noopener">shields</a></p><p>徽章的使用不仅仅是为了装 B，而是为了让开源想更高效。进入项目主页一眼能看出需要的东西，例如该项目能否编译通过，当前最新的版本是什么等。</p><p>徽章能突出视野，github 默认给我们展示的是黑白世界，但是通过 徽章，将会得到改变。重要的信息可以一目了然。</p><h3 id="最常用徽章有哪些？"><a href="#最常用徽章有哪些？" class="headerlink" title="最常用徽章有哪些？"></a>最常用徽章有哪些？</h3><p>一份不太靠谱的标准，不过你应该掌握:<br><img src="https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kaiyuan-md-21.png" alt=""><br>（PS: 上图中的图标顺序对应下面的顺序）</p><ol><li>jitpack 徽章：<a href="https://jitpack.io" target="_blank" rel="noopener">JitPack</a> 是一个仓库，类似 maven，binary, 主要是帮我们生产 android 项目的 aar or jar 的平台。基于 GitHub，可以很方便将 library 发布到远程，然后可以用 gradle 依赖到任何一个项目中。</li><li>travis-ci 徽章：<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis-CI</a> 是一个线托管的CI服务，不需要自己搭服务器，在网页上点几下就好，用起来更方便。最重要的是，它对开源项目是免费的。</li><li>circle-ci 徽章：<a href="https://circleci.com/" target="_blank" rel="noopener">Cricle-CI</a> 是也一个线托管的CI服务，和上面相同，不过这个相对来说比较好用一些，可以 SSH 到测试容器，方便在出问题的时候上去调试找原因，界面相对好看一些。</li><li>codecov 徽章：<a href="https://codecov.io" target="_blank" rel="noopener">Codecov</a> 是开源的测试结果展示平台，将测试结果可视化。Github上许多开源项目都使用了Codecov来展示单测结果。</li><li>api level 徽章：<a href="https://android-arsenal.com/api" target="_blank" rel="noopener">Api-Leavel</a> 是 android-arsenal 网站提供的 android api 展示的徽章。可以在项目主页中直接使用 badge 的内容。 </li><li>codacy 徽章：编程代码自动审查服务平台。帮助开发者及时发现代码中的 bug，提升软件运行质量，主要包括代码质量、语法规范、功能可用性方面的检查。</li><li>个人专属 徽章：<a href="https://shields.io/" target="_blank" rel="noopener">shiedls</a> 根据自己的需求可以定制很多样式的徽章，全凭个人 爱好，怎么开心怎么玩。</li></ol><h3 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h3><p>完整版：<br><a href="http://www.gdky005.com/2017/06/15/%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E5%B0%8F%E7%99%BD%E5%85%A8%E6%94%BB%E7%95%A5/" target="_blank" rel="noopener">打造一个高逼格的android开源项目——小白全攻略</a></p><p>精简集合版：<br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%971%EF%BC%9A-Top-30-android-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%BE%BD%E7%AB%A0/" target="_blank" rel="noopener">徽章系列1： Top 30 android 开源项目徽章</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%972%EF%BC%9AJitPack-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列2：JitPack 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%973%EF%BC%9A-Travis-CI-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列3： Travis CI 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%974%EF%BC%9A-Circle-CI-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列4： Circle CI 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%975%EF%BC%9A-Codecov-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列5： Codecov 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%976%EF%BC%9A-Api-Level-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列6： Api_Level 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%977%EF%BC%9A-codacy-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">徽章系列7： codacy 的使用</a><br><a href="http://www.gdky005.com/2017/06/15/%E5%BE%BD%E7%AB%A0%E7%B3%BB%E5%88%978%EF%BC%9A%E7%94%9F%E6%88%90%E4%B8%AA%E6%80%A7%E5%BE%BD%E7%AB%A0/" target="_blank" rel="noopener">徽章系列8：生成个性徽章</a></p><p>总分类：<br><a href="http://www.gdky005.com/categories/shields/" target="_blank" rel="noopener">徽章（shields ）系列文章总分类</a></p><p>github 地址：<br><a href="https://github.com/gdky005/AndroidBadge" target="_blank" rel="noopener">徽章项目 Demo github 地址：</a><br> <a href="https://github.com/gdky005/AndroidBadge" target="_blank" rel="noopener">https://github.com/gdky005/AndroidBadge</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们尝试在 github 里面搜索 以 android  关键字 开发语言为 java 的开源项目。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gdky005/AndroidBadge/master/pic/gbg-kai
      
    
    </summary>
    
      <category term="shields" scheme="http://gdky005.com/categories/shields/"/>
    
    
      <category term="徽章" scheme="http://gdky005.com/tags/%E5%BE%BD%E7%AB%A0/"/>
    
  </entry>
  
</feed>
